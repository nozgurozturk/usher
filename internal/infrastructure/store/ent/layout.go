// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/layout"
)

// Layout is the model entity for the Layout schema.
type Layout struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LayoutQuery when eager-loading is set.
	Edges LayoutEdges `json:"edges"`
}

// LayoutEdges holds the relations/edges for other nodes in the graph.
type LayoutEdges struct {
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// Sections holds the value of the sections edge.
	Sections []*Section `json:"sections,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e LayoutEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// SectionsOrErr returns the Sections value or an error if the edge
// was not loaded in eager-loading.
func (e LayoutEdges) SectionsOrErr() ([]*Section, error) {
	if e.loadedTypes[1] {
		return e.Sections, nil
	}
	return nil, &NotLoadedError{edge: "sections"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Layout) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case layout.FieldName:
			values[i] = new(sql.NullString)
		case layout.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Layout", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Layout fields.
func (l *Layout) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case layout.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				l.ID = *value
			}
		case layout.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				l.Name = value.String
			}
		}
	}
	return nil
}

// QueryEvents queries the "events" edge of the Layout entity.
func (l *Layout) QueryEvents() *EventQuery {
	return (&LayoutClient{config: l.config}).QueryEvents(l)
}

// QuerySections queries the "sections" edge of the Layout entity.
func (l *Layout) QuerySections() *SectionQuery {
	return (&LayoutClient{config: l.config}).QuerySections(l)
}

// Update returns a builder for updating this Layout.
// Note that you need to call Layout.Unwrap() before calling this method if this Layout
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Layout) Update() *LayoutUpdateOne {
	return (&LayoutClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Layout entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Layout) Unwrap() *Layout {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Layout is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Layout) String() string {
	var builder strings.Builder
	builder.WriteString("Layout(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", name=")
	builder.WriteString(l.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Layouts is a parsable slice of Layout.
type Layouts []*Layout

func (l Layouts) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
