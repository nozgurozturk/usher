// Code generated by entc, DO NOT EDIT.

package seat

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber), v))
	})
}

// Row applies equality check predicate on the "row" field. It's identical to RowEQ.
func Row(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRow), v))
	})
}

// Col applies equality check predicate on the "col" field. It's identical to ColEQ.
func Col(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCol), v))
	})
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRank), v))
	})
}

// IsAvailable applies equality check predicate on the "is_available" field. It's identical to IsAvailableEQ.
func IsAvailable(v bool) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsAvailable), v))
	})
}

// Feature applies equality check predicate on the "feature" field. It's identical to FeatureEQ.
func Feature(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeature), v))
	})
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber), v))
	})
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumber), v))
	})
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int) predicate.Seat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Seat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumber), v...))
	})
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int) predicate.Seat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Seat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumber), v...))
	})
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumber), v))
	})
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumber), v))
	})
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumber), v))
	})
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumber), v))
	})
}

// RowEQ applies the EQ predicate on the "row" field.
func RowEQ(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRow), v))
	})
}

// RowNEQ applies the NEQ predicate on the "row" field.
func RowNEQ(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRow), v))
	})
}

// RowIn applies the In predicate on the "row" field.
func RowIn(vs ...int) predicate.Seat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Seat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRow), v...))
	})
}

// RowNotIn applies the NotIn predicate on the "row" field.
func RowNotIn(vs ...int) predicate.Seat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Seat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRow), v...))
	})
}

// RowGT applies the GT predicate on the "row" field.
func RowGT(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRow), v))
	})
}

// RowGTE applies the GTE predicate on the "row" field.
func RowGTE(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRow), v))
	})
}

// RowLT applies the LT predicate on the "row" field.
func RowLT(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRow), v))
	})
}

// RowLTE applies the LTE predicate on the "row" field.
func RowLTE(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRow), v))
	})
}

// ColEQ applies the EQ predicate on the "col" field.
func ColEQ(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCol), v))
	})
}

// ColNEQ applies the NEQ predicate on the "col" field.
func ColNEQ(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCol), v))
	})
}

// ColIn applies the In predicate on the "col" field.
func ColIn(vs ...int) predicate.Seat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Seat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCol), v...))
	})
}

// ColNotIn applies the NotIn predicate on the "col" field.
func ColNotIn(vs ...int) predicate.Seat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Seat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCol), v...))
	})
}

// ColGT applies the GT predicate on the "col" field.
func ColGT(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCol), v))
	})
}

// ColGTE applies the GTE predicate on the "col" field.
func ColGTE(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCol), v))
	})
}

// ColLT applies the LT predicate on the "col" field.
func ColLT(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCol), v))
	})
}

// ColLTE applies the LTE predicate on the "col" field.
func ColLTE(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCol), v))
	})
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRank), v))
	})
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRank), v))
	})
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...int) predicate.Seat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Seat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRank), v...))
	})
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...int) predicate.Seat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Seat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRank), v...))
	})
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRank), v))
	})
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRank), v))
	})
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRank), v))
	})
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRank), v))
	})
}

// IsAvailableEQ applies the EQ predicate on the "is_available" field.
func IsAvailableEQ(v bool) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsAvailable), v))
	})
}

// IsAvailableNEQ applies the NEQ predicate on the "is_available" field.
func IsAvailableNEQ(v bool) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsAvailable), v))
	})
}

// FeatureEQ applies the EQ predicate on the "feature" field.
func FeatureEQ(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeature), v))
	})
}

// FeatureNEQ applies the NEQ predicate on the "feature" field.
func FeatureNEQ(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeature), v))
	})
}

// FeatureIn applies the In predicate on the "feature" field.
func FeatureIn(vs ...int) predicate.Seat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Seat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFeature), v...))
	})
}

// FeatureNotIn applies the NotIn predicate on the "feature" field.
func FeatureNotIn(vs ...int) predicate.Seat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Seat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFeature), v...))
	})
}

// FeatureGT applies the GT predicate on the "feature" field.
func FeatureGT(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeature), v))
	})
}

// FeatureGTE applies the GTE predicate on the "feature" field.
func FeatureGTE(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeature), v))
	})
}

// FeatureLT applies the LT predicate on the "feature" field.
func FeatureLT(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeature), v))
	})
}

// FeatureLTE applies the LTE predicate on the "feature" field.
func FeatureLTE(v int) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeature), v))
	})
}

// HasTickets applies the HasEdge predicate on the "tickets" edge.
func HasTickets() predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TicketsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TicketsTable, TicketsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTicketsWith applies the HasEdge predicate on the "tickets" edge with a given conditions (other predicates).
func HasTicketsWith(preds ...predicate.Ticket) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TicketsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TicketsTable, TicketsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRows applies the HasEdge predicate on the "rows" edge.
func HasRows() predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RowsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RowsTable, RowsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRowsWith applies the HasEdge predicate on the "rows" edge with a given conditions (other predicates).
func HasRowsWith(preds ...predicate.Row) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RowsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RowsTable, RowsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Seat) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Seat) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Seat) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		p(s.Not())
	})
}
