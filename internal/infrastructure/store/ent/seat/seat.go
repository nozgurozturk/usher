// Code generated by entc, DO NOT EDIT.

package seat

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the seat type in the database.
	Label = "seat"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldRow holds the string denoting the row field in the database.
	FieldRow = "row"
	// FieldCol holds the string denoting the col field in the database.
	FieldCol = "col"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// FieldIsAvailable holds the string denoting the is_available field in the database.
	FieldIsAvailable = "is_available"
	// FieldFeature holds the string denoting the feature field in the database.
	FieldFeature = "feature"
	// EdgeTickets holds the string denoting the tickets edge name in mutations.
	EdgeTickets = "tickets"
	// EdgeRows holds the string denoting the rows edge name in mutations.
	EdgeRows = "rows"
	// Table holds the table name of the seat in the database.
	Table = "seats"
	// TicketsTable is the table that holds the tickets relation/edge.
	TicketsTable = "tickets"
	// TicketsInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	TicketsInverseTable = "tickets"
	// TicketsColumn is the table column denoting the tickets relation/edge.
	TicketsColumn = "seat_tickets"
	// RowsTable is the table that holds the rows relation/edge.
	RowsTable = "seats"
	// RowsInverseTable is the table name for the Row entity.
	// It exists in this package in order to avoid circular dependency with the "row" package.
	RowsInverseTable = "rows"
	// RowsColumn is the table column denoting the rows relation/edge.
	RowsColumn = "row_seats"
)

// Columns holds all SQL columns for seat fields.
var Columns = []string{
	FieldID,
	FieldNumber,
	FieldRow,
	FieldCol,
	FieldRank,
	FieldIsAvailable,
	FieldFeature,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "seats"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"row_seats",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRow holds the default value on creation for the "row" field.
	DefaultRow int
	// DefaultCol holds the default value on creation for the "col" field.
	DefaultCol int
	// DefaultRank holds the default value on creation for the "rank" field.
	DefaultRank int
	// DefaultIsAvailable holds the default value on creation for the "is_available" field.
	DefaultIsAvailable bool
	// DefaultFeature holds the default value on creation for the "feature" field.
	DefaultFeature int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
