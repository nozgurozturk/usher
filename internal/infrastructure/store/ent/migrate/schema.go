// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "seat_map", Type: field.TypeString},
		{Name: "start_at", Type: field.TypeTime},
		{Name: "end_at", Type: field.TypeTime},
		{Name: "layout_events", Type: field.TypeUUID, Nullable: true},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "events_layouts_events",
				Columns:    []*schema.Column{EventsColumns[6]},
				RefColumns: []*schema.Column{LayoutsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// LayoutsColumns holds the columns for the "layouts" table.
	LayoutsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString},
	}
	// LayoutsTable holds the schema information for the "layouts" table.
	LayoutsTable = &schema.Table{
		Name:       "layouts",
		Columns:    LayoutsColumns,
		PrimaryKey: []*schema.Column{LayoutsColumns[0]},
	}
	// ReservationsColumns holds the columns for the "reservations" table.
	ReservationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "size", Type: field.TypeInt, Default: 0},
		{Name: "rank", Type: field.TypeInt, Default: 0},
		{Name: "preference", Type: field.TypeInt, Default: 0},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "event_reservations", Type: field.TypeUUID, Nullable: true},
		{Name: "user_reservations", Type: field.TypeUUID, Nullable: true},
	}
	// ReservationsTable holds the schema information for the "reservations" table.
	ReservationsTable = &schema.Table{
		Name:       "reservations",
		Columns:    ReservationsColumns,
		PrimaryKey: []*schema.Column{ReservationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "reservations_events_reservations",
				Columns:    []*schema.Column{ReservationsColumns[5]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "reservations_users_reservations",
				Columns:    []*schema.Column{ReservationsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RowsColumns holds the columns for the "rows" table.
	RowsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "order", Type: field.TypeInt, Default: 0},
		{Name: "section_rows", Type: field.TypeUUID, Nullable: true},
	}
	// RowsTable holds the schema information for the "rows" table.
	RowsTable = &schema.Table{
		Name:       "rows",
		Columns:    RowsColumns,
		PrimaryKey: []*schema.Column{RowsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "rows_sections_rows",
				Columns:    []*schema.Column{RowsColumns[3]},
				RefColumns: []*schema.Column{SectionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SeatsColumns holds the columns for the "seats" table.
	SeatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "number", Type: field.TypeInt},
		{Name: "row", Type: field.TypeInt, Default: 0},
		{Name: "col", Type: field.TypeInt, Default: 0},
		{Name: "rank", Type: field.TypeInt, Default: 0},
		{Name: "is_available", Type: field.TypeBool, Default: true},
		{Name: "feature", Type: field.TypeInt, Default: 0},
		{Name: "row_seats", Type: field.TypeUUID, Nullable: true},
	}
	// SeatsTable holds the schema information for the "seats" table.
	SeatsTable = &schema.Table{
		Name:       "seats",
		Columns:    SeatsColumns,
		PrimaryKey: []*schema.Column{SeatsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "seats_rows_seats",
				Columns:    []*schema.Column{SeatsColumns[7]},
				RefColumns: []*schema.Column{RowsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SectionsColumns holds the columns for the "sections" table.
	SectionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "layout_sections", Type: field.TypeUUID, Nullable: true},
	}
	// SectionsTable holds the schema information for the "sections" table.
	SectionsTable = &schema.Table{
		Name:       "sections",
		Columns:    SectionsColumns,
		PrimaryKey: []*schema.Column{SectionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sections_layouts_sections",
				Columns:    []*schema.Column{SectionsColumns[2]},
				RefColumns: []*schema.Column{LayoutsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TicketsColumns holds the columns for the "tickets" table.
	TicketsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "event_tickets", Type: field.TypeUUID, Nullable: true},
		{Name: "seat_tickets", Type: field.TypeUUID, Nullable: true},
		{Name: "user_tickets", Type: field.TypeUUID, Nullable: true},
	}
	// TicketsTable holds the schema information for the "tickets" table.
	TicketsTable = &schema.Table{
		Name:       "tickets",
		Columns:    TicketsColumns,
		PrimaryKey: []*schema.Column{TicketsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tickets_events_tickets",
				Columns:    []*schema.Column{TicketsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "tickets_seats_tickets",
				Columns:    []*schema.Column{TicketsColumns[2]},
				RefColumns: []*schema.Column{SeatsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "tickets_users_tickets",
				Columns:    []*schema.Column{TicketsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		EventsTable,
		LayoutsTable,
		ReservationsTable,
		RowsTable,
		SeatsTable,
		SectionsTable,
		TicketsTable,
		UsersTable,
	}
)

func init() {
	EventsTable.ForeignKeys[0].RefTable = LayoutsTable
	ReservationsTable.ForeignKeys[0].RefTable = EventsTable
	ReservationsTable.ForeignKeys[1].RefTable = UsersTable
	RowsTable.ForeignKeys[0].RefTable = SectionsTable
	SeatsTable.ForeignKeys[0].RefTable = RowsTable
	SectionsTable.ForeignKeys[0].RefTable = LayoutsTable
	TicketsTable.ForeignKeys[0].RefTable = EventsTable
	TicketsTable.ForeignKeys[1].RefTable = SeatsTable
	TicketsTable.ForeignKeys[2].RefTable = UsersTable
}
