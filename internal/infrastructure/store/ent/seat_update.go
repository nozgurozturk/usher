// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/predicate"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/row"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/seat"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/ticket"
)

// SeatUpdate is the builder for updating Seat entities.
type SeatUpdate struct {
	config
	hooks    []Hook
	mutation *SeatMutation
}

// Where appends a list predicates to the SeatUpdate builder.
func (su *SeatUpdate) Where(ps ...predicate.Seat) *SeatUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetNumber sets the "number" field.
func (su *SeatUpdate) SetNumber(i int) *SeatUpdate {
	su.mutation.ResetNumber()
	su.mutation.SetNumber(i)
	return su
}

// AddNumber adds i to the "number" field.
func (su *SeatUpdate) AddNumber(i int) *SeatUpdate {
	su.mutation.AddNumber(i)
	return su
}

// SetRow sets the "row" field.
func (su *SeatUpdate) SetRow(i int) *SeatUpdate {
	su.mutation.ResetRow()
	su.mutation.SetRow(i)
	return su
}

// SetNillableRow sets the "row" field if the given value is not nil.
func (su *SeatUpdate) SetNillableRow(i *int) *SeatUpdate {
	if i != nil {
		su.SetRow(*i)
	}
	return su
}

// AddRow adds i to the "row" field.
func (su *SeatUpdate) AddRow(i int) *SeatUpdate {
	su.mutation.AddRow(i)
	return su
}

// SetCol sets the "col" field.
func (su *SeatUpdate) SetCol(i int) *SeatUpdate {
	su.mutation.ResetCol()
	su.mutation.SetCol(i)
	return su
}

// SetNillableCol sets the "col" field if the given value is not nil.
func (su *SeatUpdate) SetNillableCol(i *int) *SeatUpdate {
	if i != nil {
		su.SetCol(*i)
	}
	return su
}

// AddCol adds i to the "col" field.
func (su *SeatUpdate) AddCol(i int) *SeatUpdate {
	su.mutation.AddCol(i)
	return su
}

// SetRank sets the "rank" field.
func (su *SeatUpdate) SetRank(i int) *SeatUpdate {
	su.mutation.ResetRank()
	su.mutation.SetRank(i)
	return su
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (su *SeatUpdate) SetNillableRank(i *int) *SeatUpdate {
	if i != nil {
		su.SetRank(*i)
	}
	return su
}

// AddRank adds i to the "rank" field.
func (su *SeatUpdate) AddRank(i int) *SeatUpdate {
	su.mutation.AddRank(i)
	return su
}

// SetIsAvailable sets the "is_available" field.
func (su *SeatUpdate) SetIsAvailable(b bool) *SeatUpdate {
	su.mutation.SetIsAvailable(b)
	return su
}

// SetNillableIsAvailable sets the "is_available" field if the given value is not nil.
func (su *SeatUpdate) SetNillableIsAvailable(b *bool) *SeatUpdate {
	if b != nil {
		su.SetIsAvailable(*b)
	}
	return su
}

// SetFeature sets the "feature" field.
func (su *SeatUpdate) SetFeature(i int) *SeatUpdate {
	su.mutation.ResetFeature()
	su.mutation.SetFeature(i)
	return su
}

// SetNillableFeature sets the "feature" field if the given value is not nil.
func (su *SeatUpdate) SetNillableFeature(i *int) *SeatUpdate {
	if i != nil {
		su.SetFeature(*i)
	}
	return su
}

// AddFeature adds i to the "feature" field.
func (su *SeatUpdate) AddFeature(i int) *SeatUpdate {
	su.mutation.AddFeature(i)
	return su
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (su *SeatUpdate) AddTicketIDs(ids ...uuid.UUID) *SeatUpdate {
	su.mutation.AddTicketIDs(ids...)
	return su
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (su *SeatUpdate) AddTickets(t ...*Ticket) *SeatUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTicketIDs(ids...)
}

// SetRowsID sets the "rows" edge to the Row entity by ID.
func (su *SeatUpdate) SetRowsID(id uuid.UUID) *SeatUpdate {
	su.mutation.SetRowsID(id)
	return su
}

// SetNillableRowsID sets the "rows" edge to the Row entity by ID if the given value is not nil.
func (su *SeatUpdate) SetNillableRowsID(id *uuid.UUID) *SeatUpdate {
	if id != nil {
		su = su.SetRowsID(*id)
	}
	return su
}

// SetRows sets the "rows" edge to the Row entity.
func (su *SeatUpdate) SetRows(r *Row) *SeatUpdate {
	return su.SetRowsID(r.ID)
}

// Mutation returns the SeatMutation object of the builder.
func (su *SeatUpdate) Mutation() *SeatMutation {
	return su.mutation
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (su *SeatUpdate) ClearTickets() *SeatUpdate {
	su.mutation.ClearTickets()
	return su
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (su *SeatUpdate) RemoveTicketIDs(ids ...uuid.UUID) *SeatUpdate {
	su.mutation.RemoveTicketIDs(ids...)
	return su
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (su *SeatUpdate) RemoveTickets(t ...*Ticket) *SeatUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTicketIDs(ids...)
}

// ClearRows clears the "rows" edge to the Row entity.
func (su *SeatUpdate) ClearRows() *SeatUpdate {
	su.mutation.ClearRows()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SeatUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SeatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SeatUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SeatUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SeatUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SeatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   seat.Table,
			Columns: seat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: seat.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldNumber,
		})
	}
	if value, ok := su.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldNumber,
		})
	}
	if value, ok := su.mutation.Row(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldRow,
		})
	}
	if value, ok := su.mutation.AddedRow(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldRow,
		})
	}
	if value, ok := su.mutation.Col(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldCol,
		})
	}
	if value, ok := su.mutation.AddedCol(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldCol,
		})
	}
	if value, ok := su.mutation.Rank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldRank,
		})
	}
	if value, ok := su.mutation.AddedRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldRank,
		})
	}
	if value, ok := su.mutation.IsAvailable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: seat.FieldIsAvailable,
		})
	}
	if value, ok := su.mutation.Feature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldFeature,
		})
	}
	if value, ok := su.mutation.AddedFeature(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldFeature,
		})
	}
	if su.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seat.TicketsTable,
			Columns: []string{seat.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !su.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seat.TicketsTable,
			Columns: []string{seat.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seat.TicketsTable,
			Columns: []string{seat.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.RowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seat.RowsTable,
			Columns: []string{seat.RowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: row.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seat.RowsTable,
			Columns: []string{seat.RowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: row.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SeatUpdateOne is the builder for updating a single Seat entity.
type SeatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SeatMutation
}

// SetNumber sets the "number" field.
func (suo *SeatUpdateOne) SetNumber(i int) *SeatUpdateOne {
	suo.mutation.ResetNumber()
	suo.mutation.SetNumber(i)
	return suo
}

// AddNumber adds i to the "number" field.
func (suo *SeatUpdateOne) AddNumber(i int) *SeatUpdateOne {
	suo.mutation.AddNumber(i)
	return suo
}

// SetRow sets the "row" field.
func (suo *SeatUpdateOne) SetRow(i int) *SeatUpdateOne {
	suo.mutation.ResetRow()
	suo.mutation.SetRow(i)
	return suo
}

// SetNillableRow sets the "row" field if the given value is not nil.
func (suo *SeatUpdateOne) SetNillableRow(i *int) *SeatUpdateOne {
	if i != nil {
		suo.SetRow(*i)
	}
	return suo
}

// AddRow adds i to the "row" field.
func (suo *SeatUpdateOne) AddRow(i int) *SeatUpdateOne {
	suo.mutation.AddRow(i)
	return suo
}

// SetCol sets the "col" field.
func (suo *SeatUpdateOne) SetCol(i int) *SeatUpdateOne {
	suo.mutation.ResetCol()
	suo.mutation.SetCol(i)
	return suo
}

// SetNillableCol sets the "col" field if the given value is not nil.
func (suo *SeatUpdateOne) SetNillableCol(i *int) *SeatUpdateOne {
	if i != nil {
		suo.SetCol(*i)
	}
	return suo
}

// AddCol adds i to the "col" field.
func (suo *SeatUpdateOne) AddCol(i int) *SeatUpdateOne {
	suo.mutation.AddCol(i)
	return suo
}

// SetRank sets the "rank" field.
func (suo *SeatUpdateOne) SetRank(i int) *SeatUpdateOne {
	suo.mutation.ResetRank()
	suo.mutation.SetRank(i)
	return suo
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (suo *SeatUpdateOne) SetNillableRank(i *int) *SeatUpdateOne {
	if i != nil {
		suo.SetRank(*i)
	}
	return suo
}

// AddRank adds i to the "rank" field.
func (suo *SeatUpdateOne) AddRank(i int) *SeatUpdateOne {
	suo.mutation.AddRank(i)
	return suo
}

// SetIsAvailable sets the "is_available" field.
func (suo *SeatUpdateOne) SetIsAvailable(b bool) *SeatUpdateOne {
	suo.mutation.SetIsAvailable(b)
	return suo
}

// SetNillableIsAvailable sets the "is_available" field if the given value is not nil.
func (suo *SeatUpdateOne) SetNillableIsAvailable(b *bool) *SeatUpdateOne {
	if b != nil {
		suo.SetIsAvailable(*b)
	}
	return suo
}

// SetFeature sets the "feature" field.
func (suo *SeatUpdateOne) SetFeature(i int) *SeatUpdateOne {
	suo.mutation.ResetFeature()
	suo.mutation.SetFeature(i)
	return suo
}

// SetNillableFeature sets the "feature" field if the given value is not nil.
func (suo *SeatUpdateOne) SetNillableFeature(i *int) *SeatUpdateOne {
	if i != nil {
		suo.SetFeature(*i)
	}
	return suo
}

// AddFeature adds i to the "feature" field.
func (suo *SeatUpdateOne) AddFeature(i int) *SeatUpdateOne {
	suo.mutation.AddFeature(i)
	return suo
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (suo *SeatUpdateOne) AddTicketIDs(ids ...uuid.UUID) *SeatUpdateOne {
	suo.mutation.AddTicketIDs(ids...)
	return suo
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (suo *SeatUpdateOne) AddTickets(t ...*Ticket) *SeatUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTicketIDs(ids...)
}

// SetRowsID sets the "rows" edge to the Row entity by ID.
func (suo *SeatUpdateOne) SetRowsID(id uuid.UUID) *SeatUpdateOne {
	suo.mutation.SetRowsID(id)
	return suo
}

// SetNillableRowsID sets the "rows" edge to the Row entity by ID if the given value is not nil.
func (suo *SeatUpdateOne) SetNillableRowsID(id *uuid.UUID) *SeatUpdateOne {
	if id != nil {
		suo = suo.SetRowsID(*id)
	}
	return suo
}

// SetRows sets the "rows" edge to the Row entity.
func (suo *SeatUpdateOne) SetRows(r *Row) *SeatUpdateOne {
	return suo.SetRowsID(r.ID)
}

// Mutation returns the SeatMutation object of the builder.
func (suo *SeatUpdateOne) Mutation() *SeatMutation {
	return suo.mutation
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (suo *SeatUpdateOne) ClearTickets() *SeatUpdateOne {
	suo.mutation.ClearTickets()
	return suo
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (suo *SeatUpdateOne) RemoveTicketIDs(ids ...uuid.UUID) *SeatUpdateOne {
	suo.mutation.RemoveTicketIDs(ids...)
	return suo
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (suo *SeatUpdateOne) RemoveTickets(t ...*Ticket) *SeatUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTicketIDs(ids...)
}

// ClearRows clears the "rows" edge to the Row entity.
func (suo *SeatUpdateOne) ClearRows() *SeatUpdateOne {
	suo.mutation.ClearRows()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SeatUpdateOne) Select(field string, fields ...string) *SeatUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Seat entity.
func (suo *SeatUpdateOne) Save(ctx context.Context) (*Seat, error) {
	var (
		err  error
		node *Seat
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SeatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SeatUpdateOne) SaveX(ctx context.Context) *Seat {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SeatUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SeatUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SeatUpdateOne) sqlSave(ctx context.Context) (_node *Seat, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   seat.Table,
			Columns: seat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: seat.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Seat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seat.FieldID)
		for _, f := range fields {
			if !seat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != seat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldNumber,
		})
	}
	if value, ok := suo.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldNumber,
		})
	}
	if value, ok := suo.mutation.Row(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldRow,
		})
	}
	if value, ok := suo.mutation.AddedRow(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldRow,
		})
	}
	if value, ok := suo.mutation.Col(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldCol,
		})
	}
	if value, ok := suo.mutation.AddedCol(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldCol,
		})
	}
	if value, ok := suo.mutation.Rank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldRank,
		})
	}
	if value, ok := suo.mutation.AddedRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldRank,
		})
	}
	if value, ok := suo.mutation.IsAvailable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: seat.FieldIsAvailable,
		})
	}
	if value, ok := suo.mutation.Feature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldFeature,
		})
	}
	if value, ok := suo.mutation.AddedFeature(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldFeature,
		})
	}
	if suo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seat.TicketsTable,
			Columns: []string{seat.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !suo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seat.TicketsTable,
			Columns: []string{seat.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seat.TicketsTable,
			Columns: []string{seat.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.RowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seat.RowsTable,
			Columns: []string{seat.RowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: row.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seat.RowsTable,
			Columns: []string{seat.RowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: row.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Seat{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
