// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/event"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/seat"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/ticket"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/user"
)

// Ticket is the model entity for the Ticket schema.
type Ticket struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TicketQuery when eager-loading is set.
	Edges         TicketEdges `json:"edges"`
	event_tickets *uuid.UUID
	seat_tickets  *uuid.UUID
	user_tickets  *uuid.UUID
}

// TicketEdges holds the relations/edges for other nodes in the graph.
type TicketEdges struct {
	// Seat holds the value of the seat edge.
	Seat *Seat `json:"seat,omitempty"`
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SeatOrErr returns the Seat value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) SeatOrErr() (*Seat, error) {
	if e.loadedTypes[0] {
		if e.Seat == nil {
			// The edge seat was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: seat.Label}
		}
		return e.Seat, nil
	}
	return nil, &NotLoadedError{edge: "seat"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[1] {
		if e.Event == nil {
			// The edge event was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ticket) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticket.FieldID:
			values[i] = new(uuid.UUID)
		case ticket.ForeignKeys[0]: // event_tickets
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case ticket.ForeignKeys[1]: // seat_tickets
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case ticket.ForeignKeys[2]: // user_tickets
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Ticket", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ticket fields.
func (t *Ticket) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticket.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case ticket.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field event_tickets", values[i])
			} else if value.Valid {
				t.event_tickets = new(uuid.UUID)
				*t.event_tickets = *value.S.(*uuid.UUID)
			}
		case ticket.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field seat_tickets", values[i])
			} else if value.Valid {
				t.seat_tickets = new(uuid.UUID)
				*t.seat_tickets = *value.S.(*uuid.UUID)
			}
		case ticket.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_tickets", values[i])
			} else if value.Valid {
				t.user_tickets = new(uuid.UUID)
				*t.user_tickets = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QuerySeat queries the "seat" edge of the Ticket entity.
func (t *Ticket) QuerySeat() *SeatQuery {
	return (&TicketClient{config: t.config}).QuerySeat(t)
}

// QueryEvent queries the "event" edge of the Ticket entity.
func (t *Ticket) QueryEvent() *EventQuery {
	return (&TicketClient{config: t.config}).QueryEvent(t)
}

// QueryUser queries the "user" edge of the Ticket entity.
func (t *Ticket) QueryUser() *UserQuery {
	return (&TicketClient{config: t.config}).QueryUser(t)
}

// Update returns a builder for updating this Ticket.
// Note that you need to call Ticket.Unwrap() before calling this method if this Ticket
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Ticket) Update() *TicketUpdateOne {
	return (&TicketClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Ticket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Ticket) Unwrap() *Ticket {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ticket is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Ticket) String() string {
	var builder strings.Builder
	builder.WriteString("Ticket(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Tickets is a parsable slice of Ticket.
type Tickets []*Ticket

func (t Tickets) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
