// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/row"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/seat"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/ticket"
)

// SeatCreate is the builder for creating a Seat entity.
type SeatCreate struct {
	config
	mutation *SeatMutation
	hooks    []Hook
}

// SetNumber sets the "number" field.
func (sc *SeatCreate) SetNumber(i int) *SeatCreate {
	sc.mutation.SetNumber(i)
	return sc
}

// SetRow sets the "row" field.
func (sc *SeatCreate) SetRow(i int) *SeatCreate {
	sc.mutation.SetRow(i)
	return sc
}

// SetNillableRow sets the "row" field if the given value is not nil.
func (sc *SeatCreate) SetNillableRow(i *int) *SeatCreate {
	if i != nil {
		sc.SetRow(*i)
	}
	return sc
}

// SetCol sets the "col" field.
func (sc *SeatCreate) SetCol(i int) *SeatCreate {
	sc.mutation.SetCol(i)
	return sc
}

// SetNillableCol sets the "col" field if the given value is not nil.
func (sc *SeatCreate) SetNillableCol(i *int) *SeatCreate {
	if i != nil {
		sc.SetCol(*i)
	}
	return sc
}

// SetRank sets the "rank" field.
func (sc *SeatCreate) SetRank(i int) *SeatCreate {
	sc.mutation.SetRank(i)
	return sc
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (sc *SeatCreate) SetNillableRank(i *int) *SeatCreate {
	if i != nil {
		sc.SetRank(*i)
	}
	return sc
}

// SetIsAvailable sets the "is_available" field.
func (sc *SeatCreate) SetIsAvailable(b bool) *SeatCreate {
	sc.mutation.SetIsAvailable(b)
	return sc
}

// SetNillableIsAvailable sets the "is_available" field if the given value is not nil.
func (sc *SeatCreate) SetNillableIsAvailable(b *bool) *SeatCreate {
	if b != nil {
		sc.SetIsAvailable(*b)
	}
	return sc
}

// SetFeature sets the "feature" field.
func (sc *SeatCreate) SetFeature(i int) *SeatCreate {
	sc.mutation.SetFeature(i)
	return sc
}

// SetNillableFeature sets the "feature" field if the given value is not nil.
func (sc *SeatCreate) SetNillableFeature(i *int) *SeatCreate {
	if i != nil {
		sc.SetFeature(*i)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SeatCreate) SetID(u uuid.UUID) *SeatCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SeatCreate) SetNillableID(u *uuid.UUID) *SeatCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (sc *SeatCreate) AddTicketIDs(ids ...uuid.UUID) *SeatCreate {
	sc.mutation.AddTicketIDs(ids...)
	return sc
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (sc *SeatCreate) AddTickets(t ...*Ticket) *SeatCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddTicketIDs(ids...)
}

// SetRowsID sets the "rows" edge to the Row entity by ID.
func (sc *SeatCreate) SetRowsID(id uuid.UUID) *SeatCreate {
	sc.mutation.SetRowsID(id)
	return sc
}

// SetNillableRowsID sets the "rows" edge to the Row entity by ID if the given value is not nil.
func (sc *SeatCreate) SetNillableRowsID(id *uuid.UUID) *SeatCreate {
	if id != nil {
		sc = sc.SetRowsID(*id)
	}
	return sc
}

// SetRows sets the "rows" edge to the Row entity.
func (sc *SeatCreate) SetRows(r *Row) *SeatCreate {
	return sc.SetRowsID(r.ID)
}

// Mutation returns the SeatMutation object of the builder.
func (sc *SeatCreate) Mutation() *SeatMutation {
	return sc.mutation
}

// Save creates the Seat in the database.
func (sc *SeatCreate) Save(ctx context.Context) (*Seat, error) {
	var (
		err  error
		node *Seat
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SeatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SeatCreate) SaveX(ctx context.Context) *Seat {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SeatCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SeatCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SeatCreate) defaults() {
	if _, ok := sc.mutation.Row(); !ok {
		v := seat.DefaultRow
		sc.mutation.SetRow(v)
	}
	if _, ok := sc.mutation.Col(); !ok {
		v := seat.DefaultCol
		sc.mutation.SetCol(v)
	}
	if _, ok := sc.mutation.Rank(); !ok {
		v := seat.DefaultRank
		sc.mutation.SetRank(v)
	}
	if _, ok := sc.mutation.IsAvailable(); !ok {
		v := seat.DefaultIsAvailable
		sc.mutation.SetIsAvailable(v)
	}
	if _, ok := sc.mutation.Feature(); !ok {
		v := seat.DefaultFeature
		sc.mutation.SetFeature(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := seat.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SeatCreate) check() error {
	if _, ok := sc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "Seat.number"`)}
	}
	if _, ok := sc.mutation.Row(); !ok {
		return &ValidationError{Name: "row", err: errors.New(`ent: missing required field "Seat.row"`)}
	}
	if _, ok := sc.mutation.Col(); !ok {
		return &ValidationError{Name: "col", err: errors.New(`ent: missing required field "Seat.col"`)}
	}
	if _, ok := sc.mutation.Rank(); !ok {
		return &ValidationError{Name: "rank", err: errors.New(`ent: missing required field "Seat.rank"`)}
	}
	if _, ok := sc.mutation.IsAvailable(); !ok {
		return &ValidationError{Name: "is_available", err: errors.New(`ent: missing required field "Seat.is_available"`)}
	}
	if _, ok := sc.mutation.Feature(); !ok {
		return &ValidationError{Name: "feature", err: errors.New(`ent: missing required field "Seat.feature"`)}
	}
	return nil
}

func (sc *SeatCreate) sqlSave(ctx context.Context) (*Seat, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (sc *SeatCreate) createSpec() (*Seat, *sqlgraph.CreateSpec) {
	var (
		_node = &Seat{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: seat.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: seat.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.Number(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldNumber,
		})
		_node.Number = value
	}
	if value, ok := sc.mutation.Row(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldRow,
		})
		_node.Row = value
	}
	if value, ok := sc.mutation.Col(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldCol,
		})
		_node.Col = value
	}
	if value, ok := sc.mutation.Rank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldRank,
		})
		_node.Rank = value
	}
	if value, ok := sc.mutation.IsAvailable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: seat.FieldIsAvailable,
		})
		_node.IsAvailable = value
	}
	if value, ok := sc.mutation.Feature(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: seat.FieldFeature,
		})
		_node.Feature = value
	}
	if nodes := sc.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seat.TicketsTable,
			Columns: []string{seat.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.RowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seat.RowsTable,
			Columns: []string{seat.RowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: row.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.row_seats = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SeatCreateBulk is the builder for creating many Seat entities in bulk.
type SeatCreateBulk struct {
	config
	builders []*SeatCreate
}

// Save creates the Seat entities in the database.
func (scb *SeatCreateBulk) Save(ctx context.Context) ([]*Seat, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Seat, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SeatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SeatCreateBulk) SaveX(ctx context.Context) []*Seat {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SeatCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SeatCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
