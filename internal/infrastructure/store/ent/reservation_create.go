// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/event"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/reservation"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/user"
)

// ReservationCreate is the builder for creating a Reservation entity.
type ReservationCreate struct {
	config
	mutation *ReservationMutation
	hooks    []Hook
}

// SetSize sets the "size" field.
func (rc *ReservationCreate) SetSize(i int) *ReservationCreate {
	rc.mutation.SetSize(i)
	return rc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableSize(i *int) *ReservationCreate {
	if i != nil {
		rc.SetSize(*i)
	}
	return rc
}

// SetRank sets the "rank" field.
func (rc *ReservationCreate) SetRank(i int) *ReservationCreate {
	rc.mutation.SetRank(i)
	return rc
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableRank(i *int) *ReservationCreate {
	if i != nil {
		rc.SetRank(*i)
	}
	return rc
}

// SetPreference sets the "preference" field.
func (rc *ReservationCreate) SetPreference(i int) *ReservationCreate {
	rc.mutation.SetPreference(i)
	return rc
}

// SetNillablePreference sets the "preference" field if the given value is not nil.
func (rc *ReservationCreate) SetNillablePreference(i *int) *ReservationCreate {
	if i != nil {
		rc.SetPreference(*i)
	}
	return rc
}

// SetIsActive sets the "is_active" field.
func (rc *ReservationCreate) SetIsActive(b bool) *ReservationCreate {
	rc.mutation.SetIsActive(b)
	return rc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableIsActive(b *bool) *ReservationCreate {
	if b != nil {
		rc.SetIsActive(*b)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ReservationCreate) SetID(u uuid.UUID) *ReservationCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableID(u *uuid.UUID) *ReservationCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (rc *ReservationCreate) SetEventID(id uuid.UUID) *ReservationCreate {
	rc.mutation.SetEventID(id)
	return rc
}

// SetEvent sets the "event" edge to the Event entity.
func (rc *ReservationCreate) SetEvent(e *Event) *ReservationCreate {
	return rc.SetEventID(e.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (rc *ReservationCreate) SetUserID(id uuid.UUID) *ReservationCreate {
	rc.mutation.SetUserID(id)
	return rc
}

// SetUser sets the "user" edge to the User entity.
func (rc *ReservationCreate) SetUser(u *User) *ReservationCreate {
	return rc.SetUserID(u.ID)
}

// Mutation returns the ReservationMutation object of the builder.
func (rc *ReservationCreate) Mutation() *ReservationMutation {
	return rc.mutation
}

// Save creates the Reservation in the database.
func (rc *ReservationCreate) Save(ctx context.Context) (*Reservation, error) {
	var (
		err  error
		node *Reservation
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReservationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReservationCreate) SaveX(ctx context.Context) *Reservation {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReservationCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReservationCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReservationCreate) defaults() {
	if _, ok := rc.mutation.Size(); !ok {
		v := reservation.DefaultSize
		rc.mutation.SetSize(v)
	}
	if _, ok := rc.mutation.Rank(); !ok {
		v := reservation.DefaultRank
		rc.mutation.SetRank(v)
	}
	if _, ok := rc.mutation.Preference(); !ok {
		v := reservation.DefaultPreference
		rc.mutation.SetPreference(v)
	}
	if _, ok := rc.mutation.IsActive(); !ok {
		v := reservation.DefaultIsActive
		rc.mutation.SetIsActive(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := reservation.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReservationCreate) check() error {
	if _, ok := rc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "Reservation.size"`)}
	}
	if _, ok := rc.mutation.Rank(); !ok {
		return &ValidationError{Name: "rank", err: errors.New(`ent: missing required field "Reservation.rank"`)}
	}
	if _, ok := rc.mutation.Preference(); !ok {
		return &ValidationError{Name: "preference", err: errors.New(`ent: missing required field "Reservation.preference"`)}
	}
	if _, ok := rc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Reservation.is_active"`)}
	}
	if _, ok := rc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "Reservation.event"`)}
	}
	if _, ok := rc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Reservation.user"`)}
	}
	return nil
}

func (rc *ReservationCreate) sqlSave(ctx context.Context) (*Reservation, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (rc *ReservationCreate) createSpec() (*Reservation, *sqlgraph.CreateSpec) {
	var (
		_node = &Reservation{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: reservation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: reservation.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.Size(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reservation.FieldSize,
		})
		_node.Size = value
	}
	if value, ok := rc.mutation.Rank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reservation.FieldRank,
		})
		_node.Rank = value
	}
	if value, ok := rc.mutation.Preference(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reservation.FieldPreference,
		})
		_node.Preference = value
	}
	if value, ok := rc.mutation.IsActive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: reservation.FieldIsActive,
		})
		_node.IsActive = value
	}
	if nodes := rc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.EventTable,
			Columns: []string{reservation.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_reservations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.UserTable,
			Columns: []string{reservation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_reservations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReservationCreateBulk is the builder for creating many Reservation entities in bulk.
type ReservationCreateBulk struct {
	config
	builders []*ReservationCreate
}

// Save creates the Reservation entities in the database.
func (rcb *ReservationCreateBulk) Save(ctx context.Context) ([]*Reservation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reservation, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReservationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReservationCreateBulk) SaveX(ctx context.Context) []*Reservation {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReservationCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReservationCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
