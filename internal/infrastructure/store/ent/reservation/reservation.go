// Code generated by entc, DO NOT EDIT.

package reservation

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the reservation type in the database.
	Label = "reservation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// FieldPreference holds the string denoting the preference field in the database.
	FieldPreference = "preference"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the reservation in the database.
	Table = "reservations"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "reservations"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "event_reservations"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "reservations"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_reservations"
)

// Columns holds all SQL columns for reservation fields.
var Columns = []string{
	FieldID,
	FieldSize,
	FieldRank,
	FieldPreference,
	FieldIsActive,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "reservations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_reservations",
	"user_reservations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSize holds the default value on creation for the "size" field.
	DefaultSize int
	// DefaultRank holds the default value on creation for the "rank" field.
	DefaultRank int
	// DefaultPreference holds the default value on creation for the "preference" field.
	DefaultPreference int
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
