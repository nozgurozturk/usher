// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/row"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/seat"
)

// Seat is the model entity for the Seat schema.
type Seat struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Number holds the value of the "number" field.
	Number int `json:"number,omitempty"`
	// Row holds the value of the "row" field.
	Row int `json:"row,omitempty"`
	// Col holds the value of the "col" field.
	Col int `json:"col,omitempty"`
	// Rank holds the value of the "rank" field.
	Rank int `json:"rank,omitempty"`
	// IsAvailable holds the value of the "is_available" field.
	IsAvailable bool `json:"is_available,omitempty"`
	// Feature holds the value of the "feature" field.
	Feature int `json:"feature,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SeatQuery when eager-loading is set.
	Edges     SeatEdges `json:"edges"`
	row_seats *uuid.UUID
}

// SeatEdges holds the relations/edges for other nodes in the graph.
type SeatEdges struct {
	// Tickets holds the value of the tickets edge.
	Tickets []*Ticket `json:"tickets,omitempty"`
	// Rows holds the value of the rows edge.
	Rows *Row `json:"rows,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TicketsOrErr returns the Tickets value or an error if the edge
// was not loaded in eager-loading.
func (e SeatEdges) TicketsOrErr() ([]*Ticket, error) {
	if e.loadedTypes[0] {
		return e.Tickets, nil
	}
	return nil, &NotLoadedError{edge: "tickets"}
}

// RowsOrErr returns the Rows value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SeatEdges) RowsOrErr() (*Row, error) {
	if e.loadedTypes[1] {
		if e.Rows == nil {
			// The edge rows was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: row.Label}
		}
		return e.Rows, nil
	}
	return nil, &NotLoadedError{edge: "rows"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Seat) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case seat.FieldIsAvailable:
			values[i] = new(sql.NullBool)
		case seat.FieldNumber, seat.FieldRow, seat.FieldCol, seat.FieldRank, seat.FieldFeature:
			values[i] = new(sql.NullInt64)
		case seat.FieldID:
			values[i] = new(uuid.UUID)
		case seat.ForeignKeys[0]: // row_seats
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Seat", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Seat fields.
func (s *Seat) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case seat.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case seat.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				s.Number = int(value.Int64)
			}
		case seat.FieldRow:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field row", values[i])
			} else if value.Valid {
				s.Row = int(value.Int64)
			}
		case seat.FieldCol:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field col", values[i])
			} else if value.Valid {
				s.Col = int(value.Int64)
			}
		case seat.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				s.Rank = int(value.Int64)
			}
		case seat.FieldIsAvailable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_available", values[i])
			} else if value.Valid {
				s.IsAvailable = value.Bool
			}
		case seat.FieldFeature:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feature", values[i])
			} else if value.Valid {
				s.Feature = int(value.Int64)
			}
		case seat.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field row_seats", values[i])
			} else if value.Valid {
				s.row_seats = new(uuid.UUID)
				*s.row_seats = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryTickets queries the "tickets" edge of the Seat entity.
func (s *Seat) QueryTickets() *TicketQuery {
	return (&SeatClient{config: s.config}).QueryTickets(s)
}

// QueryRows queries the "rows" edge of the Seat entity.
func (s *Seat) QueryRows() *RowQuery {
	return (&SeatClient{config: s.config}).QueryRows(s)
}

// Update returns a builder for updating this Seat.
// Note that you need to call Seat.Unwrap() before calling this method if this Seat
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Seat) Update() *SeatUpdateOne {
	return (&SeatClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Seat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Seat) Unwrap() *Seat {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Seat is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Seat) String() string {
	var builder strings.Builder
	builder.WriteString("Seat(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", number=")
	builder.WriteString(fmt.Sprintf("%v", s.Number))
	builder.WriteString(", row=")
	builder.WriteString(fmt.Sprintf("%v", s.Row))
	builder.WriteString(", col=")
	builder.WriteString(fmt.Sprintf("%v", s.Col))
	builder.WriteString(", rank=")
	builder.WriteString(fmt.Sprintf("%v", s.Rank))
	builder.WriteString(", is_available=")
	builder.WriteString(fmt.Sprintf("%v", s.IsAvailable))
	builder.WriteString(", feature=")
	builder.WriteString(fmt.Sprintf("%v", s.Feature))
	builder.WriteByte(')')
	return builder.String()
}

// Seats is a parsable slice of Seat.
type Seats []*Seat

func (s Seats) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
