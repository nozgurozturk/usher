// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/predicate"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/row"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/seat"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/section"
)

// RowUpdate is the builder for updating Row entities.
type RowUpdate struct {
	config
	hooks    []Hook
	mutation *RowMutation
}

// Where appends a list predicates to the RowUpdate builder.
func (ru *RowUpdate) Where(ps ...predicate.Row) *RowUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RowUpdate) SetName(s string) *RowUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetOrder sets the "order" field.
func (ru *RowUpdate) SetOrder(i int) *RowUpdate {
	ru.mutation.ResetOrder()
	ru.mutation.SetOrder(i)
	return ru
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (ru *RowUpdate) SetNillableOrder(i *int) *RowUpdate {
	if i != nil {
		ru.SetOrder(*i)
	}
	return ru
}

// AddOrder adds i to the "order" field.
func (ru *RowUpdate) AddOrder(i int) *RowUpdate {
	ru.mutation.AddOrder(i)
	return ru
}

// SetSectionID sets the "section" edge to the Section entity by ID.
func (ru *RowUpdate) SetSectionID(id uuid.UUID) *RowUpdate {
	ru.mutation.SetSectionID(id)
	return ru
}

// SetNillableSectionID sets the "section" edge to the Section entity by ID if the given value is not nil.
func (ru *RowUpdate) SetNillableSectionID(id *uuid.UUID) *RowUpdate {
	if id != nil {
		ru = ru.SetSectionID(*id)
	}
	return ru
}

// SetSection sets the "section" edge to the Section entity.
func (ru *RowUpdate) SetSection(s *Section) *RowUpdate {
	return ru.SetSectionID(s.ID)
}

// AddSeatIDs adds the "seats" edge to the Seat entity by IDs.
func (ru *RowUpdate) AddSeatIDs(ids ...uuid.UUID) *RowUpdate {
	ru.mutation.AddSeatIDs(ids...)
	return ru
}

// AddSeats adds the "seats" edges to the Seat entity.
func (ru *RowUpdate) AddSeats(s ...*Seat) *RowUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.AddSeatIDs(ids...)
}

// Mutation returns the RowMutation object of the builder.
func (ru *RowUpdate) Mutation() *RowMutation {
	return ru.mutation
}

// ClearSection clears the "section" edge to the Section entity.
func (ru *RowUpdate) ClearSection() *RowUpdate {
	ru.mutation.ClearSection()
	return ru
}

// ClearSeats clears all "seats" edges to the Seat entity.
func (ru *RowUpdate) ClearSeats() *RowUpdate {
	ru.mutation.ClearSeats()
	return ru
}

// RemoveSeatIDs removes the "seats" edge to Seat entities by IDs.
func (ru *RowUpdate) RemoveSeatIDs(ids ...uuid.UUID) *RowUpdate {
	ru.mutation.RemoveSeatIDs(ids...)
	return ru
}

// RemoveSeats removes "seats" edges to Seat entities.
func (ru *RowUpdate) RemoveSeats(s ...*Seat) *RowUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.RemoveSeatIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RowUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RowUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RowUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RowUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   row.Table,
			Columns: row.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: row.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: row.FieldName,
		})
	}
	if value, ok := ru.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: row.FieldOrder,
		})
	}
	if value, ok := ru.mutation.AddedOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: row.FieldOrder,
		})
	}
	if ru.mutation.SectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   row.SectionTable,
			Columns: []string{row.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: section.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   row.SectionTable,
			Columns: []string{row.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: section.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   row.SeatsTable,
			Columns: []string{row.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: seat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedSeatsIDs(); len(nodes) > 0 && !ru.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   row.SeatsTable,
			Columns: []string{row.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: seat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   row.SeatsTable,
			Columns: []string{row.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: seat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{row.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RowUpdateOne is the builder for updating a single Row entity.
type RowUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RowMutation
}

// SetName sets the "name" field.
func (ruo *RowUpdateOne) SetName(s string) *RowUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetOrder sets the "order" field.
func (ruo *RowUpdateOne) SetOrder(i int) *RowUpdateOne {
	ruo.mutation.ResetOrder()
	ruo.mutation.SetOrder(i)
	return ruo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (ruo *RowUpdateOne) SetNillableOrder(i *int) *RowUpdateOne {
	if i != nil {
		ruo.SetOrder(*i)
	}
	return ruo
}

// AddOrder adds i to the "order" field.
func (ruo *RowUpdateOne) AddOrder(i int) *RowUpdateOne {
	ruo.mutation.AddOrder(i)
	return ruo
}

// SetSectionID sets the "section" edge to the Section entity by ID.
func (ruo *RowUpdateOne) SetSectionID(id uuid.UUID) *RowUpdateOne {
	ruo.mutation.SetSectionID(id)
	return ruo
}

// SetNillableSectionID sets the "section" edge to the Section entity by ID if the given value is not nil.
func (ruo *RowUpdateOne) SetNillableSectionID(id *uuid.UUID) *RowUpdateOne {
	if id != nil {
		ruo = ruo.SetSectionID(*id)
	}
	return ruo
}

// SetSection sets the "section" edge to the Section entity.
func (ruo *RowUpdateOne) SetSection(s *Section) *RowUpdateOne {
	return ruo.SetSectionID(s.ID)
}

// AddSeatIDs adds the "seats" edge to the Seat entity by IDs.
func (ruo *RowUpdateOne) AddSeatIDs(ids ...uuid.UUID) *RowUpdateOne {
	ruo.mutation.AddSeatIDs(ids...)
	return ruo
}

// AddSeats adds the "seats" edges to the Seat entity.
func (ruo *RowUpdateOne) AddSeats(s ...*Seat) *RowUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.AddSeatIDs(ids...)
}

// Mutation returns the RowMutation object of the builder.
func (ruo *RowUpdateOne) Mutation() *RowMutation {
	return ruo.mutation
}

// ClearSection clears the "section" edge to the Section entity.
func (ruo *RowUpdateOne) ClearSection() *RowUpdateOne {
	ruo.mutation.ClearSection()
	return ruo
}

// ClearSeats clears all "seats" edges to the Seat entity.
func (ruo *RowUpdateOne) ClearSeats() *RowUpdateOne {
	ruo.mutation.ClearSeats()
	return ruo
}

// RemoveSeatIDs removes the "seats" edge to Seat entities by IDs.
func (ruo *RowUpdateOne) RemoveSeatIDs(ids ...uuid.UUID) *RowUpdateOne {
	ruo.mutation.RemoveSeatIDs(ids...)
	return ruo
}

// RemoveSeats removes "seats" edges to Seat entities.
func (ruo *RowUpdateOne) RemoveSeats(s ...*Seat) *RowUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.RemoveSeatIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RowUpdateOne) Select(field string, fields ...string) *RowUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Row entity.
func (ruo *RowUpdateOne) Save(ctx context.Context) (*Row, error) {
	var (
		err  error
		node *Row
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RowUpdateOne) SaveX(ctx context.Context) *Row {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RowUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RowUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RowUpdateOne) sqlSave(ctx context.Context) (_node *Row, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   row.Table,
			Columns: row.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: row.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Row.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, row.FieldID)
		for _, f := range fields {
			if !row.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != row.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: row.FieldName,
		})
	}
	if value, ok := ruo.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: row.FieldOrder,
		})
	}
	if value, ok := ruo.mutation.AddedOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: row.FieldOrder,
		})
	}
	if ruo.mutation.SectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   row.SectionTable,
			Columns: []string{row.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: section.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   row.SectionTable,
			Columns: []string{row.SectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: section.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   row.SeatsTable,
			Columns: []string{row.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: seat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedSeatsIDs(); len(nodes) > 0 && !ruo.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   row.SeatsTable,
			Columns: []string{row.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: seat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   row.SeatsTable,
			Columns: []string{row.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: seat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Row{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{row.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
