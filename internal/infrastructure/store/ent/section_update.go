// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/layout"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/predicate"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/row"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/section"
)

// SectionUpdate is the builder for updating Section entities.
type SectionUpdate struct {
	config
	hooks    []Hook
	mutation *SectionMutation
}

// Where appends a list predicates to the SectionUpdate builder.
func (su *SectionUpdate) Where(ps ...predicate.Section) *SectionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SectionUpdate) SetName(s string) *SectionUpdate {
	su.mutation.SetName(s)
	return su
}

// SetLayoutID sets the "layout" edge to the Layout entity by ID.
func (su *SectionUpdate) SetLayoutID(id uuid.UUID) *SectionUpdate {
	su.mutation.SetLayoutID(id)
	return su
}

// SetNillableLayoutID sets the "layout" edge to the Layout entity by ID if the given value is not nil.
func (su *SectionUpdate) SetNillableLayoutID(id *uuid.UUID) *SectionUpdate {
	if id != nil {
		su = su.SetLayoutID(*id)
	}
	return su
}

// SetLayout sets the "layout" edge to the Layout entity.
func (su *SectionUpdate) SetLayout(l *Layout) *SectionUpdate {
	return su.SetLayoutID(l.ID)
}

// AddRowIDs adds the "rows" edge to the Row entity by IDs.
func (su *SectionUpdate) AddRowIDs(ids ...uuid.UUID) *SectionUpdate {
	su.mutation.AddRowIDs(ids...)
	return su
}

// AddRows adds the "rows" edges to the Row entity.
func (su *SectionUpdate) AddRows(r ...*Row) *SectionUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.AddRowIDs(ids...)
}

// Mutation returns the SectionMutation object of the builder.
func (su *SectionUpdate) Mutation() *SectionMutation {
	return su.mutation
}

// ClearLayout clears the "layout" edge to the Layout entity.
func (su *SectionUpdate) ClearLayout() *SectionUpdate {
	su.mutation.ClearLayout()
	return su
}

// ClearRows clears all "rows" edges to the Row entity.
func (su *SectionUpdate) ClearRows() *SectionUpdate {
	su.mutation.ClearRows()
	return su
}

// RemoveRowIDs removes the "rows" edge to Row entities by IDs.
func (su *SectionUpdate) RemoveRowIDs(ids ...uuid.UUID) *SectionUpdate {
	su.mutation.RemoveRowIDs(ids...)
	return su
}

// RemoveRows removes "rows" edges to Row entities.
func (su *SectionUpdate) RemoveRows(r ...*Row) *SectionUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.RemoveRowIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SectionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SectionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SectionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SectionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   section.Table,
			Columns: section.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: section.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: section.FieldName,
		})
	}
	if su.mutation.LayoutCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.LayoutTable,
			Columns: []string{section.LayoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: layout.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.LayoutIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.LayoutTable,
			Columns: []string{section.LayoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: layout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.RowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.RowsTable,
			Columns: []string{section.RowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: row.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedRowsIDs(); len(nodes) > 0 && !su.mutation.RowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.RowsTable,
			Columns: []string{section.RowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: row.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.RowsTable,
			Columns: []string{section.RowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: row.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{section.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SectionUpdateOne is the builder for updating a single Section entity.
type SectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SectionMutation
}

// SetName sets the "name" field.
func (suo *SectionUpdateOne) SetName(s string) *SectionUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetLayoutID sets the "layout" edge to the Layout entity by ID.
func (suo *SectionUpdateOne) SetLayoutID(id uuid.UUID) *SectionUpdateOne {
	suo.mutation.SetLayoutID(id)
	return suo
}

// SetNillableLayoutID sets the "layout" edge to the Layout entity by ID if the given value is not nil.
func (suo *SectionUpdateOne) SetNillableLayoutID(id *uuid.UUID) *SectionUpdateOne {
	if id != nil {
		suo = suo.SetLayoutID(*id)
	}
	return suo
}

// SetLayout sets the "layout" edge to the Layout entity.
func (suo *SectionUpdateOne) SetLayout(l *Layout) *SectionUpdateOne {
	return suo.SetLayoutID(l.ID)
}

// AddRowIDs adds the "rows" edge to the Row entity by IDs.
func (suo *SectionUpdateOne) AddRowIDs(ids ...uuid.UUID) *SectionUpdateOne {
	suo.mutation.AddRowIDs(ids...)
	return suo
}

// AddRows adds the "rows" edges to the Row entity.
func (suo *SectionUpdateOne) AddRows(r ...*Row) *SectionUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.AddRowIDs(ids...)
}

// Mutation returns the SectionMutation object of the builder.
func (suo *SectionUpdateOne) Mutation() *SectionMutation {
	return suo.mutation
}

// ClearLayout clears the "layout" edge to the Layout entity.
func (suo *SectionUpdateOne) ClearLayout() *SectionUpdateOne {
	suo.mutation.ClearLayout()
	return suo
}

// ClearRows clears all "rows" edges to the Row entity.
func (suo *SectionUpdateOne) ClearRows() *SectionUpdateOne {
	suo.mutation.ClearRows()
	return suo
}

// RemoveRowIDs removes the "rows" edge to Row entities by IDs.
func (suo *SectionUpdateOne) RemoveRowIDs(ids ...uuid.UUID) *SectionUpdateOne {
	suo.mutation.RemoveRowIDs(ids...)
	return suo
}

// RemoveRows removes "rows" edges to Row entities.
func (suo *SectionUpdateOne) RemoveRows(r ...*Row) *SectionUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.RemoveRowIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SectionUpdateOne) Select(field string, fields ...string) *SectionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Section entity.
func (suo *SectionUpdateOne) Save(ctx context.Context) (*Section, error) {
	var (
		err  error
		node *Section
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SectionUpdateOne) SaveX(ctx context.Context) *Section {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SectionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SectionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SectionUpdateOne) sqlSave(ctx context.Context) (_node *Section, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   section.Table,
			Columns: section.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: section.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Section.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, section.FieldID)
		for _, f := range fields {
			if !section.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != section.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: section.FieldName,
		})
	}
	if suo.mutation.LayoutCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.LayoutTable,
			Columns: []string{section.LayoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: layout.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.LayoutIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   section.LayoutTable,
			Columns: []string{section.LayoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: layout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.RowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.RowsTable,
			Columns: []string{section.RowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: row.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedRowsIDs(); len(nodes) > 0 && !suo.mutation.RowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.RowsTable,
			Columns: []string{section.RowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: row.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.RowsTable,
			Columns: []string{section.RowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: row.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Section{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{section.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
