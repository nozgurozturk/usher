// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/event"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/layout"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/predicate"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/reservation"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/row"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/seat"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/section"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/ticket"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEvent       = "Event"
	TypeLayout      = "Layout"
	TypeReservation = "Reservation"
	TypeRow         = "Row"
	TypeSeat        = "Seat"
	TypeSection     = "Section"
	TypeTicket      = "Ticket"
	TypeUser        = "User"
)

// EventMutation represents an operation that mutates the Event nodes in the graph.
type EventMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	name                *string
	description         *string
	seat_map            *string
	start_at            *time.Time
	end_at              *time.Time
	clearedFields       map[string]struct{}
	reservations        map[uuid.UUID]struct{}
	removedreservations map[uuid.UUID]struct{}
	clearedreservations bool
	tickets             map[uuid.UUID]struct{}
	removedtickets      map[uuid.UUID]struct{}
	clearedtickets      bool
	layout              *uuid.UUID
	clearedlayout       bool
	done                bool
	oldValue            func(context.Context) (*Event, error)
	predicates          []predicate.Event
}

var _ ent.Mutation = (*EventMutation)(nil)

// eventOption allows management of the mutation configuration using functional options.
type eventOption func(*EventMutation)

// newEventMutation creates new mutation for the Event entity.
func newEventMutation(c config, op Op, opts ...eventOption) *EventMutation {
	m := &EventMutation{
		config:        c,
		op:            op,
		typ:           TypeEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventID sets the ID field of the mutation.
func withEventID(id uuid.UUID) eventOption {
	return func(m *EventMutation) {
		var (
			err   error
			once  sync.Once
			value *Event
		)
		m.oldValue = func(ctx context.Context) (*Event, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Event.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvent sets the old Event of the mutation.
func withEvent(node *Event) eventOption {
	return func(m *EventMutation) {
		m.oldValue = func(context.Context) (*Event, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Event entities.
func (m *EventMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Event.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *EventMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EventMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EventMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *EventMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *EventMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *EventMutation) ResetDescription() {
	m.description = nil
}

// SetSeatMap sets the "seat_map" field.
func (m *EventMutation) SetSeatMap(s string) {
	m.seat_map = &s
}

// SeatMap returns the value of the "seat_map" field in the mutation.
func (m *EventMutation) SeatMap() (r string, exists bool) {
	v := m.seat_map
	if v == nil {
		return
	}
	return *v, true
}

// OldSeatMap returns the old "seat_map" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldSeatMap(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSeatMap is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSeatMap requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeatMap: %w", err)
	}
	return oldValue.SeatMap, nil
}

// ResetSeatMap resets all changes to the "seat_map" field.
func (m *EventMutation) ResetSeatMap() {
	m.seat_map = nil
}

// SetStartAt sets the "start_at" field.
func (m *EventMutation) SetStartAt(t time.Time) {
	m.start_at = &t
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *EventMutation) StartAt() (r time.Time, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *EventMutation) ResetStartAt() {
	m.start_at = nil
}

// SetEndAt sets the "end_at" field.
func (m *EventMutation) SetEndAt(t time.Time) {
	m.end_at = &t
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *EventMutation) EndAt() (r time.Time, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldEndAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *EventMutation) ResetEndAt() {
	m.end_at = nil
}

// AddReservationIDs adds the "reservations" edge to the Reservation entity by ids.
func (m *EventMutation) AddReservationIDs(ids ...uuid.UUID) {
	if m.reservations == nil {
		m.reservations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.reservations[ids[i]] = struct{}{}
	}
}

// ClearReservations clears the "reservations" edge to the Reservation entity.
func (m *EventMutation) ClearReservations() {
	m.clearedreservations = true
}

// ReservationsCleared reports if the "reservations" edge to the Reservation entity was cleared.
func (m *EventMutation) ReservationsCleared() bool {
	return m.clearedreservations
}

// RemoveReservationIDs removes the "reservations" edge to the Reservation entity by IDs.
func (m *EventMutation) RemoveReservationIDs(ids ...uuid.UUID) {
	if m.removedreservations == nil {
		m.removedreservations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.reservations, ids[i])
		m.removedreservations[ids[i]] = struct{}{}
	}
}

// RemovedReservations returns the removed IDs of the "reservations" edge to the Reservation entity.
func (m *EventMutation) RemovedReservationsIDs() (ids []uuid.UUID) {
	for id := range m.removedreservations {
		ids = append(ids, id)
	}
	return
}

// ReservationsIDs returns the "reservations" edge IDs in the mutation.
func (m *EventMutation) ReservationsIDs() (ids []uuid.UUID) {
	for id := range m.reservations {
		ids = append(ids, id)
	}
	return
}

// ResetReservations resets all changes to the "reservations" edge.
func (m *EventMutation) ResetReservations() {
	m.reservations = nil
	m.clearedreservations = false
	m.removedreservations = nil
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by ids.
func (m *EventMutation) AddTicketIDs(ids ...uuid.UUID) {
	if m.tickets == nil {
		m.tickets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.tickets[ids[i]] = struct{}{}
	}
}

// ClearTickets clears the "tickets" edge to the Ticket entity.
func (m *EventMutation) ClearTickets() {
	m.clearedtickets = true
}

// TicketsCleared reports if the "tickets" edge to the Ticket entity was cleared.
func (m *EventMutation) TicketsCleared() bool {
	return m.clearedtickets
}

// RemoveTicketIDs removes the "tickets" edge to the Ticket entity by IDs.
func (m *EventMutation) RemoveTicketIDs(ids ...uuid.UUID) {
	if m.removedtickets == nil {
		m.removedtickets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.tickets, ids[i])
		m.removedtickets[ids[i]] = struct{}{}
	}
}

// RemovedTickets returns the removed IDs of the "tickets" edge to the Ticket entity.
func (m *EventMutation) RemovedTicketsIDs() (ids []uuid.UUID) {
	for id := range m.removedtickets {
		ids = append(ids, id)
	}
	return
}

// TicketsIDs returns the "tickets" edge IDs in the mutation.
func (m *EventMutation) TicketsIDs() (ids []uuid.UUID) {
	for id := range m.tickets {
		ids = append(ids, id)
	}
	return
}

// ResetTickets resets all changes to the "tickets" edge.
func (m *EventMutation) ResetTickets() {
	m.tickets = nil
	m.clearedtickets = false
	m.removedtickets = nil
}

// SetLayoutID sets the "layout" edge to the Layout entity by id.
func (m *EventMutation) SetLayoutID(id uuid.UUID) {
	m.layout = &id
}

// ClearLayout clears the "layout" edge to the Layout entity.
func (m *EventMutation) ClearLayout() {
	m.clearedlayout = true
}

// LayoutCleared reports if the "layout" edge to the Layout entity was cleared.
func (m *EventMutation) LayoutCleared() bool {
	return m.clearedlayout
}

// LayoutID returns the "layout" edge ID in the mutation.
func (m *EventMutation) LayoutID() (id uuid.UUID, exists bool) {
	if m.layout != nil {
		return *m.layout, true
	}
	return
}

// LayoutIDs returns the "layout" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LayoutID instead. It exists only for internal usage by the builders.
func (m *EventMutation) LayoutIDs() (ids []uuid.UUID) {
	if id := m.layout; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLayout resets all changes to the "layout" edge.
func (m *EventMutation) ResetLayout() {
	m.layout = nil
	m.clearedlayout = false
}

// Where appends a list predicates to the EventMutation builder.
func (m *EventMutation) Where(ps ...predicate.Event) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EventMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Event).
func (m *EventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, event.FieldName)
	}
	if m.description != nil {
		fields = append(fields, event.FieldDescription)
	}
	if m.seat_map != nil {
		fields = append(fields, event.FieldSeatMap)
	}
	if m.start_at != nil {
		fields = append(fields, event.FieldStartAt)
	}
	if m.end_at != nil {
		fields = append(fields, event.FieldEndAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case event.FieldName:
		return m.Name()
	case event.FieldDescription:
		return m.Description()
	case event.FieldSeatMap:
		return m.SeatMap()
	case event.FieldStartAt:
		return m.StartAt()
	case event.FieldEndAt:
		return m.EndAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case event.FieldName:
		return m.OldName(ctx)
	case event.FieldDescription:
		return m.OldDescription(ctx)
	case event.FieldSeatMap:
		return m.OldSeatMap(ctx)
	case event.FieldStartAt:
		return m.OldStartAt(ctx)
	case event.FieldEndAt:
		return m.OldEndAt(ctx)
	}
	return nil, fmt.Errorf("unknown Event field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case event.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case event.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case event.FieldSeatMap:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeatMap(v)
		return nil
	case event.FieldStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case event.FieldEndAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Event numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Event nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventMutation) ResetField(name string) error {
	switch name {
	case event.FieldName:
		m.ResetName()
		return nil
	case event.FieldDescription:
		m.ResetDescription()
		return nil
	case event.FieldSeatMap:
		m.ResetSeatMap()
		return nil
	case event.FieldStartAt:
		m.ResetStartAt()
		return nil
	case event.FieldEndAt:
		m.ResetEndAt()
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.reservations != nil {
		edges = append(edges, event.EdgeReservations)
	}
	if m.tickets != nil {
		edges = append(edges, event.EdgeTickets)
	}
	if m.layout != nil {
		edges = append(edges, event.EdgeLayout)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeReservations:
		ids := make([]ent.Value, 0, len(m.reservations))
		for id := range m.reservations {
			ids = append(ids, id)
		}
		return ids
	case event.EdgeTickets:
		ids := make([]ent.Value, 0, len(m.tickets))
		for id := range m.tickets {
			ids = append(ids, id)
		}
		return ids
	case event.EdgeLayout:
		if id := m.layout; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedreservations != nil {
		edges = append(edges, event.EdgeReservations)
	}
	if m.removedtickets != nil {
		edges = append(edges, event.EdgeTickets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeReservations:
		ids := make([]ent.Value, 0, len(m.removedreservations))
		for id := range m.removedreservations {
			ids = append(ids, id)
		}
		return ids
	case event.EdgeTickets:
		ids := make([]ent.Value, 0, len(m.removedtickets))
		for id := range m.removedtickets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedreservations {
		edges = append(edges, event.EdgeReservations)
	}
	if m.clearedtickets {
		edges = append(edges, event.EdgeTickets)
	}
	if m.clearedlayout {
		edges = append(edges, event.EdgeLayout)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventMutation) EdgeCleared(name string) bool {
	switch name {
	case event.EdgeReservations:
		return m.clearedreservations
	case event.EdgeTickets:
		return m.clearedtickets
	case event.EdgeLayout:
		return m.clearedlayout
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventMutation) ClearEdge(name string) error {
	switch name {
	case event.EdgeLayout:
		m.ClearLayout()
		return nil
	}
	return fmt.Errorf("unknown Event unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventMutation) ResetEdge(name string) error {
	switch name {
	case event.EdgeReservations:
		m.ResetReservations()
		return nil
	case event.EdgeTickets:
		m.ResetTickets()
		return nil
	case event.EdgeLayout:
		m.ResetLayout()
		return nil
	}
	return fmt.Errorf("unknown Event edge %s", name)
}

// LayoutMutation represents an operation that mutates the Layout nodes in the graph.
type LayoutMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	name            *string
	clearedFields   map[string]struct{}
	events          map[uuid.UUID]struct{}
	removedevents   map[uuid.UUID]struct{}
	clearedevents   bool
	sections        map[uuid.UUID]struct{}
	removedsections map[uuid.UUID]struct{}
	clearedsections bool
	done            bool
	oldValue        func(context.Context) (*Layout, error)
	predicates      []predicate.Layout
}

var _ ent.Mutation = (*LayoutMutation)(nil)

// layoutOption allows management of the mutation configuration using functional options.
type layoutOption func(*LayoutMutation)

// newLayoutMutation creates new mutation for the Layout entity.
func newLayoutMutation(c config, op Op, opts ...layoutOption) *LayoutMutation {
	m := &LayoutMutation{
		config:        c,
		op:            op,
		typ:           TypeLayout,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLayoutID sets the ID field of the mutation.
func withLayoutID(id uuid.UUID) layoutOption {
	return func(m *LayoutMutation) {
		var (
			err   error
			once  sync.Once
			value *Layout
		)
		m.oldValue = func(ctx context.Context) (*Layout, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Layout.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLayout sets the old Layout of the mutation.
func withLayout(node *Layout) layoutOption {
	return func(m *LayoutMutation) {
		m.oldValue = func(context.Context) (*Layout, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LayoutMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LayoutMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Layout entities.
func (m *LayoutMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LayoutMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LayoutMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Layout.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *LayoutMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LayoutMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Layout entity.
// If the Layout object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LayoutMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LayoutMutation) ResetName() {
	m.name = nil
}

// AddEventIDs adds the "events" edge to the Event entity by ids.
func (m *LayoutMutation) AddEventIDs(ids ...uuid.UUID) {
	if m.events == nil {
		m.events = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.events[ids[i]] = struct{}{}
	}
}

// ClearEvents clears the "events" edge to the Event entity.
func (m *LayoutMutation) ClearEvents() {
	m.clearedevents = true
}

// EventsCleared reports if the "events" edge to the Event entity was cleared.
func (m *LayoutMutation) EventsCleared() bool {
	return m.clearedevents
}

// RemoveEventIDs removes the "events" edge to the Event entity by IDs.
func (m *LayoutMutation) RemoveEventIDs(ids ...uuid.UUID) {
	if m.removedevents == nil {
		m.removedevents = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.events, ids[i])
		m.removedevents[ids[i]] = struct{}{}
	}
}

// RemovedEvents returns the removed IDs of the "events" edge to the Event entity.
func (m *LayoutMutation) RemovedEventsIDs() (ids []uuid.UUID) {
	for id := range m.removedevents {
		ids = append(ids, id)
	}
	return
}

// EventsIDs returns the "events" edge IDs in the mutation.
func (m *LayoutMutation) EventsIDs() (ids []uuid.UUID) {
	for id := range m.events {
		ids = append(ids, id)
	}
	return
}

// ResetEvents resets all changes to the "events" edge.
func (m *LayoutMutation) ResetEvents() {
	m.events = nil
	m.clearedevents = false
	m.removedevents = nil
}

// AddSectionIDs adds the "sections" edge to the Section entity by ids.
func (m *LayoutMutation) AddSectionIDs(ids ...uuid.UUID) {
	if m.sections == nil {
		m.sections = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.sections[ids[i]] = struct{}{}
	}
}

// ClearSections clears the "sections" edge to the Section entity.
func (m *LayoutMutation) ClearSections() {
	m.clearedsections = true
}

// SectionsCleared reports if the "sections" edge to the Section entity was cleared.
func (m *LayoutMutation) SectionsCleared() bool {
	return m.clearedsections
}

// RemoveSectionIDs removes the "sections" edge to the Section entity by IDs.
func (m *LayoutMutation) RemoveSectionIDs(ids ...uuid.UUID) {
	if m.removedsections == nil {
		m.removedsections = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.sections, ids[i])
		m.removedsections[ids[i]] = struct{}{}
	}
}

// RemovedSections returns the removed IDs of the "sections" edge to the Section entity.
func (m *LayoutMutation) RemovedSectionsIDs() (ids []uuid.UUID) {
	for id := range m.removedsections {
		ids = append(ids, id)
	}
	return
}

// SectionsIDs returns the "sections" edge IDs in the mutation.
func (m *LayoutMutation) SectionsIDs() (ids []uuid.UUID) {
	for id := range m.sections {
		ids = append(ids, id)
	}
	return
}

// ResetSections resets all changes to the "sections" edge.
func (m *LayoutMutation) ResetSections() {
	m.sections = nil
	m.clearedsections = false
	m.removedsections = nil
}

// Where appends a list predicates to the LayoutMutation builder.
func (m *LayoutMutation) Where(ps ...predicate.Layout) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LayoutMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Layout).
func (m *LayoutMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LayoutMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, layout.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LayoutMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case layout.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LayoutMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case layout.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Layout field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LayoutMutation) SetField(name string, value ent.Value) error {
	switch name {
	case layout.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Layout field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LayoutMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LayoutMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LayoutMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Layout numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LayoutMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LayoutMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LayoutMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Layout nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LayoutMutation) ResetField(name string) error {
	switch name {
	case layout.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Layout field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LayoutMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.events != nil {
		edges = append(edges, layout.EdgeEvents)
	}
	if m.sections != nil {
		edges = append(edges, layout.EdgeSections)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LayoutMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case layout.EdgeEvents:
		ids := make([]ent.Value, 0, len(m.events))
		for id := range m.events {
			ids = append(ids, id)
		}
		return ids
	case layout.EdgeSections:
		ids := make([]ent.Value, 0, len(m.sections))
		for id := range m.sections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LayoutMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedevents != nil {
		edges = append(edges, layout.EdgeEvents)
	}
	if m.removedsections != nil {
		edges = append(edges, layout.EdgeSections)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LayoutMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case layout.EdgeEvents:
		ids := make([]ent.Value, 0, len(m.removedevents))
		for id := range m.removedevents {
			ids = append(ids, id)
		}
		return ids
	case layout.EdgeSections:
		ids := make([]ent.Value, 0, len(m.removedsections))
		for id := range m.removedsections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LayoutMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedevents {
		edges = append(edges, layout.EdgeEvents)
	}
	if m.clearedsections {
		edges = append(edges, layout.EdgeSections)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LayoutMutation) EdgeCleared(name string) bool {
	switch name {
	case layout.EdgeEvents:
		return m.clearedevents
	case layout.EdgeSections:
		return m.clearedsections
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LayoutMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Layout unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LayoutMutation) ResetEdge(name string) error {
	switch name {
	case layout.EdgeEvents:
		m.ResetEvents()
		return nil
	case layout.EdgeSections:
		m.ResetSections()
		return nil
	}
	return fmt.Errorf("unknown Layout edge %s", name)
}

// ReservationMutation represents an operation that mutates the Reservation nodes in the graph.
type ReservationMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	size          *int
	addsize       *int
	rank          *int
	addrank       *int
	preference    *int
	addpreference *int
	is_active     *bool
	clearedFields map[string]struct{}
	event         *uuid.UUID
	clearedevent  bool
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Reservation, error)
	predicates    []predicate.Reservation
}

var _ ent.Mutation = (*ReservationMutation)(nil)

// reservationOption allows management of the mutation configuration using functional options.
type reservationOption func(*ReservationMutation)

// newReservationMutation creates new mutation for the Reservation entity.
func newReservationMutation(c config, op Op, opts ...reservationOption) *ReservationMutation {
	m := &ReservationMutation{
		config:        c,
		op:            op,
		typ:           TypeReservation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReservationID sets the ID field of the mutation.
func withReservationID(id uuid.UUID) reservationOption {
	return func(m *ReservationMutation) {
		var (
			err   error
			once  sync.Once
			value *Reservation
		)
		m.oldValue = func(ctx context.Context) (*Reservation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Reservation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReservation sets the old Reservation of the mutation.
func withReservation(node *Reservation) reservationOption {
	return func(m *ReservationMutation) {
		m.oldValue = func(context.Context) (*Reservation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReservationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReservationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Reservation entities.
func (m *ReservationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReservationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReservationMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Reservation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSize sets the "size" field.
func (m *ReservationMutation) SetSize(i int) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *ReservationMutation) Size() (r int, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the Reservation entity.
// If the Reservation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReservationMutation) OldSize(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *ReservationMutation) AddSize(i int) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *ReservationMutation) AddedSize() (r int, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *ReservationMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetRank sets the "rank" field.
func (m *ReservationMutation) SetRank(i int) {
	m.rank = &i
	m.addrank = nil
}

// Rank returns the value of the "rank" field in the mutation.
func (m *ReservationMutation) Rank() (r int, exists bool) {
	v := m.rank
	if v == nil {
		return
	}
	return *v, true
}

// OldRank returns the old "rank" field's value of the Reservation entity.
// If the Reservation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReservationMutation) OldRank(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRank is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRank requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRank: %w", err)
	}
	return oldValue.Rank, nil
}

// AddRank adds i to the "rank" field.
func (m *ReservationMutation) AddRank(i int) {
	if m.addrank != nil {
		*m.addrank += i
	} else {
		m.addrank = &i
	}
}

// AddedRank returns the value that was added to the "rank" field in this mutation.
func (m *ReservationMutation) AddedRank() (r int, exists bool) {
	v := m.addrank
	if v == nil {
		return
	}
	return *v, true
}

// ResetRank resets all changes to the "rank" field.
func (m *ReservationMutation) ResetRank() {
	m.rank = nil
	m.addrank = nil
}

// SetPreference sets the "preference" field.
func (m *ReservationMutation) SetPreference(i int) {
	m.preference = &i
	m.addpreference = nil
}

// Preference returns the value of the "preference" field in the mutation.
func (m *ReservationMutation) Preference() (r int, exists bool) {
	v := m.preference
	if v == nil {
		return
	}
	return *v, true
}

// OldPreference returns the old "preference" field's value of the Reservation entity.
// If the Reservation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReservationMutation) OldPreference(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPreference is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPreference requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPreference: %w", err)
	}
	return oldValue.Preference, nil
}

// AddPreference adds i to the "preference" field.
func (m *ReservationMutation) AddPreference(i int) {
	if m.addpreference != nil {
		*m.addpreference += i
	} else {
		m.addpreference = &i
	}
}

// AddedPreference returns the value that was added to the "preference" field in this mutation.
func (m *ReservationMutation) AddedPreference() (r int, exists bool) {
	v := m.addpreference
	if v == nil {
		return
	}
	return *v, true
}

// ResetPreference resets all changes to the "preference" field.
func (m *ReservationMutation) ResetPreference() {
	m.preference = nil
	m.addpreference = nil
}

// SetIsActive sets the "is_active" field.
func (m *ReservationMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *ReservationMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the Reservation entity.
// If the Reservation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReservationMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *ReservationMutation) ResetIsActive() {
	m.is_active = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *ReservationMutation) SetEventID(id uuid.UUID) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *ReservationMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *ReservationMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *ReservationMutation) EventID() (id uuid.UUID, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *ReservationMutation) EventIDs() (ids []uuid.UUID) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *ReservationMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ReservationMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ReservationMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ReservationMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ReservationMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ReservationMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ReservationMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the ReservationMutation builder.
func (m *ReservationMutation) Where(ps ...predicate.Reservation) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ReservationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Reservation).
func (m *ReservationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReservationMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.size != nil {
		fields = append(fields, reservation.FieldSize)
	}
	if m.rank != nil {
		fields = append(fields, reservation.FieldRank)
	}
	if m.preference != nil {
		fields = append(fields, reservation.FieldPreference)
	}
	if m.is_active != nil {
		fields = append(fields, reservation.FieldIsActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReservationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case reservation.FieldSize:
		return m.Size()
	case reservation.FieldRank:
		return m.Rank()
	case reservation.FieldPreference:
		return m.Preference()
	case reservation.FieldIsActive:
		return m.IsActive()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReservationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case reservation.FieldSize:
		return m.OldSize(ctx)
	case reservation.FieldRank:
		return m.OldRank(ctx)
	case reservation.FieldPreference:
		return m.OldPreference(ctx)
	case reservation.FieldIsActive:
		return m.OldIsActive(ctx)
	}
	return nil, fmt.Errorf("unknown Reservation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReservationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case reservation.FieldSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case reservation.FieldRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRank(v)
		return nil
	case reservation.FieldPreference:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPreference(v)
		return nil
	case reservation.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	}
	return fmt.Errorf("unknown Reservation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReservationMutation) AddedFields() []string {
	var fields []string
	if m.addsize != nil {
		fields = append(fields, reservation.FieldSize)
	}
	if m.addrank != nil {
		fields = append(fields, reservation.FieldRank)
	}
	if m.addpreference != nil {
		fields = append(fields, reservation.FieldPreference)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReservationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case reservation.FieldSize:
		return m.AddedSize()
	case reservation.FieldRank:
		return m.AddedRank()
	case reservation.FieldPreference:
		return m.AddedPreference()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReservationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case reservation.FieldSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	case reservation.FieldRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRank(v)
		return nil
	case reservation.FieldPreference:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPreference(v)
		return nil
	}
	return fmt.Errorf("unknown Reservation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReservationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReservationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReservationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Reservation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReservationMutation) ResetField(name string) error {
	switch name {
	case reservation.FieldSize:
		m.ResetSize()
		return nil
	case reservation.FieldRank:
		m.ResetRank()
		return nil
	case reservation.FieldPreference:
		m.ResetPreference()
		return nil
	case reservation.FieldIsActive:
		m.ResetIsActive()
		return nil
	}
	return fmt.Errorf("unknown Reservation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReservationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.event != nil {
		edges = append(edges, reservation.EdgeEvent)
	}
	if m.user != nil {
		edges = append(edges, reservation.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReservationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case reservation.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	case reservation.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReservationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReservationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReservationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedevent {
		edges = append(edges, reservation.EdgeEvent)
	}
	if m.cleareduser {
		edges = append(edges, reservation.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReservationMutation) EdgeCleared(name string) bool {
	switch name {
	case reservation.EdgeEvent:
		return m.clearedevent
	case reservation.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReservationMutation) ClearEdge(name string) error {
	switch name {
	case reservation.EdgeEvent:
		m.ClearEvent()
		return nil
	case reservation.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Reservation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReservationMutation) ResetEdge(name string) error {
	switch name {
	case reservation.EdgeEvent:
		m.ResetEvent()
		return nil
	case reservation.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Reservation edge %s", name)
}

// RowMutation represents an operation that mutates the Row nodes in the graph.
type RowMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	name           *string
	_order         *int
	add_order      *int
	clearedFields  map[string]struct{}
	section        *uuid.UUID
	clearedsection bool
	seats          map[uuid.UUID]struct{}
	removedseats   map[uuid.UUID]struct{}
	clearedseats   bool
	done           bool
	oldValue       func(context.Context) (*Row, error)
	predicates     []predicate.Row
}

var _ ent.Mutation = (*RowMutation)(nil)

// rowOption allows management of the mutation configuration using functional options.
type rowOption func(*RowMutation)

// newRowMutation creates new mutation for the Row entity.
func newRowMutation(c config, op Op, opts ...rowOption) *RowMutation {
	m := &RowMutation{
		config:        c,
		op:            op,
		typ:           TypeRow,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRowID sets the ID field of the mutation.
func withRowID(id uuid.UUID) rowOption {
	return func(m *RowMutation) {
		var (
			err   error
			once  sync.Once
			value *Row
		)
		m.oldValue = func(ctx context.Context) (*Row, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Row.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRow sets the old Row of the mutation.
func withRow(node *Row) rowOption {
	return func(m *RowMutation) {
		m.oldValue = func(context.Context) (*Row, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RowMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RowMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Row entities.
func (m *RowMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RowMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RowMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Row.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RowMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RowMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Row entity.
// If the Row object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RowMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RowMutation) ResetName() {
	m.name = nil
}

// SetOrder sets the "order" field.
func (m *RowMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *RowMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the Row entity.
// If the Row object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RowMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *RowMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *RowMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *RowMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetSectionID sets the "section" edge to the Section entity by id.
func (m *RowMutation) SetSectionID(id uuid.UUID) {
	m.section = &id
}

// ClearSection clears the "section" edge to the Section entity.
func (m *RowMutation) ClearSection() {
	m.clearedsection = true
}

// SectionCleared reports if the "section" edge to the Section entity was cleared.
func (m *RowMutation) SectionCleared() bool {
	return m.clearedsection
}

// SectionID returns the "section" edge ID in the mutation.
func (m *RowMutation) SectionID() (id uuid.UUID, exists bool) {
	if m.section != nil {
		return *m.section, true
	}
	return
}

// SectionIDs returns the "section" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SectionID instead. It exists only for internal usage by the builders.
func (m *RowMutation) SectionIDs() (ids []uuid.UUID) {
	if id := m.section; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSection resets all changes to the "section" edge.
func (m *RowMutation) ResetSection() {
	m.section = nil
	m.clearedsection = false
}

// AddSeatIDs adds the "seats" edge to the Seat entity by ids.
func (m *RowMutation) AddSeatIDs(ids ...uuid.UUID) {
	if m.seats == nil {
		m.seats = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.seats[ids[i]] = struct{}{}
	}
}

// ClearSeats clears the "seats" edge to the Seat entity.
func (m *RowMutation) ClearSeats() {
	m.clearedseats = true
}

// SeatsCleared reports if the "seats" edge to the Seat entity was cleared.
func (m *RowMutation) SeatsCleared() bool {
	return m.clearedseats
}

// RemoveSeatIDs removes the "seats" edge to the Seat entity by IDs.
func (m *RowMutation) RemoveSeatIDs(ids ...uuid.UUID) {
	if m.removedseats == nil {
		m.removedseats = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.seats, ids[i])
		m.removedseats[ids[i]] = struct{}{}
	}
}

// RemovedSeats returns the removed IDs of the "seats" edge to the Seat entity.
func (m *RowMutation) RemovedSeatsIDs() (ids []uuid.UUID) {
	for id := range m.removedseats {
		ids = append(ids, id)
	}
	return
}

// SeatsIDs returns the "seats" edge IDs in the mutation.
func (m *RowMutation) SeatsIDs() (ids []uuid.UUID) {
	for id := range m.seats {
		ids = append(ids, id)
	}
	return
}

// ResetSeats resets all changes to the "seats" edge.
func (m *RowMutation) ResetSeats() {
	m.seats = nil
	m.clearedseats = false
	m.removedseats = nil
}

// Where appends a list predicates to the RowMutation builder.
func (m *RowMutation) Where(ps ...predicate.Row) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RowMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Row).
func (m *RowMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RowMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, row.FieldName)
	}
	if m._order != nil {
		fields = append(fields, row.FieldOrder)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RowMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case row.FieldName:
		return m.Name()
	case row.FieldOrder:
		return m.Order()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RowMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case row.FieldName:
		return m.OldName(ctx)
	case row.FieldOrder:
		return m.OldOrder(ctx)
	}
	return nil, fmt.Errorf("unknown Row field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RowMutation) SetField(name string, value ent.Value) error {
	switch name {
	case row.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case row.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Row field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RowMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, row.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RowMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case row.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RowMutation) AddField(name string, value ent.Value) error {
	switch name {
	case row.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Row numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RowMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RowMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RowMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Row nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RowMutation) ResetField(name string) error {
	switch name {
	case row.FieldName:
		m.ResetName()
		return nil
	case row.FieldOrder:
		m.ResetOrder()
		return nil
	}
	return fmt.Errorf("unknown Row field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RowMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.section != nil {
		edges = append(edges, row.EdgeSection)
	}
	if m.seats != nil {
		edges = append(edges, row.EdgeSeats)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RowMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case row.EdgeSection:
		if id := m.section; id != nil {
			return []ent.Value{*id}
		}
	case row.EdgeSeats:
		ids := make([]ent.Value, 0, len(m.seats))
		for id := range m.seats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RowMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedseats != nil {
		edges = append(edges, row.EdgeSeats)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RowMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case row.EdgeSeats:
		ids := make([]ent.Value, 0, len(m.removedseats))
		for id := range m.removedseats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RowMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsection {
		edges = append(edges, row.EdgeSection)
	}
	if m.clearedseats {
		edges = append(edges, row.EdgeSeats)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RowMutation) EdgeCleared(name string) bool {
	switch name {
	case row.EdgeSection:
		return m.clearedsection
	case row.EdgeSeats:
		return m.clearedseats
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RowMutation) ClearEdge(name string) error {
	switch name {
	case row.EdgeSection:
		m.ClearSection()
		return nil
	}
	return fmt.Errorf("unknown Row unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RowMutation) ResetEdge(name string) error {
	switch name {
	case row.EdgeSection:
		m.ResetSection()
		return nil
	case row.EdgeSeats:
		m.ResetSeats()
		return nil
	}
	return fmt.Errorf("unknown Row edge %s", name)
}

// SeatMutation represents an operation that mutates the Seat nodes in the graph.
type SeatMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	number         *int
	addnumber      *int
	row            *int
	addrow         *int
	col            *int
	addcol         *int
	rank           *int
	addrank        *int
	is_available   *bool
	feature        *int
	addfeature     *int
	clearedFields  map[string]struct{}
	tickets        map[uuid.UUID]struct{}
	removedtickets map[uuid.UUID]struct{}
	clearedtickets bool
	rows           *uuid.UUID
	clearedrows    bool
	done           bool
	oldValue       func(context.Context) (*Seat, error)
	predicates     []predicate.Seat
}

var _ ent.Mutation = (*SeatMutation)(nil)

// seatOption allows management of the mutation configuration using functional options.
type seatOption func(*SeatMutation)

// newSeatMutation creates new mutation for the Seat entity.
func newSeatMutation(c config, op Op, opts ...seatOption) *SeatMutation {
	m := &SeatMutation{
		config:        c,
		op:            op,
		typ:           TypeSeat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSeatID sets the ID field of the mutation.
func withSeatID(id uuid.UUID) seatOption {
	return func(m *SeatMutation) {
		var (
			err   error
			once  sync.Once
			value *Seat
		)
		m.oldValue = func(ctx context.Context) (*Seat, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Seat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSeat sets the old Seat of the mutation.
func withSeat(node *Seat) seatOption {
	return func(m *SeatMutation) {
		m.oldValue = func(context.Context) (*Seat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SeatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SeatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Seat entities.
func (m *SeatMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SeatMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SeatMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Seat.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNumber sets the "number" field.
func (m *SeatMutation) SetNumber(i int) {
	m.number = &i
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *SeatMutation) Number() (r int, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the Seat entity.
// If the Seat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatMutation) OldNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds i to the "number" field.
func (m *SeatMutation) AddNumber(i int) {
	if m.addnumber != nil {
		*m.addnumber += i
	} else {
		m.addnumber = &i
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *SeatMutation) AddedNumber() (r int, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *SeatMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetRow sets the "row" field.
func (m *SeatMutation) SetRow(i int) {
	m.row = &i
	m.addrow = nil
}

// Row returns the value of the "row" field in the mutation.
func (m *SeatMutation) Row() (r int, exists bool) {
	v := m.row
	if v == nil {
		return
	}
	return *v, true
}

// OldRow returns the old "row" field's value of the Seat entity.
// If the Seat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatMutation) OldRow(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRow is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRow requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRow: %w", err)
	}
	return oldValue.Row, nil
}

// AddRow adds i to the "row" field.
func (m *SeatMutation) AddRow(i int) {
	if m.addrow != nil {
		*m.addrow += i
	} else {
		m.addrow = &i
	}
}

// AddedRow returns the value that was added to the "row" field in this mutation.
func (m *SeatMutation) AddedRow() (r int, exists bool) {
	v := m.addrow
	if v == nil {
		return
	}
	return *v, true
}

// ResetRow resets all changes to the "row" field.
func (m *SeatMutation) ResetRow() {
	m.row = nil
	m.addrow = nil
}

// SetCol sets the "col" field.
func (m *SeatMutation) SetCol(i int) {
	m.col = &i
	m.addcol = nil
}

// Col returns the value of the "col" field in the mutation.
func (m *SeatMutation) Col() (r int, exists bool) {
	v := m.col
	if v == nil {
		return
	}
	return *v, true
}

// OldCol returns the old "col" field's value of the Seat entity.
// If the Seat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatMutation) OldCol(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCol: %w", err)
	}
	return oldValue.Col, nil
}

// AddCol adds i to the "col" field.
func (m *SeatMutation) AddCol(i int) {
	if m.addcol != nil {
		*m.addcol += i
	} else {
		m.addcol = &i
	}
}

// AddedCol returns the value that was added to the "col" field in this mutation.
func (m *SeatMutation) AddedCol() (r int, exists bool) {
	v := m.addcol
	if v == nil {
		return
	}
	return *v, true
}

// ResetCol resets all changes to the "col" field.
func (m *SeatMutation) ResetCol() {
	m.col = nil
	m.addcol = nil
}

// SetRank sets the "rank" field.
func (m *SeatMutation) SetRank(i int) {
	m.rank = &i
	m.addrank = nil
}

// Rank returns the value of the "rank" field in the mutation.
func (m *SeatMutation) Rank() (r int, exists bool) {
	v := m.rank
	if v == nil {
		return
	}
	return *v, true
}

// OldRank returns the old "rank" field's value of the Seat entity.
// If the Seat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatMutation) OldRank(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRank is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRank requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRank: %w", err)
	}
	return oldValue.Rank, nil
}

// AddRank adds i to the "rank" field.
func (m *SeatMutation) AddRank(i int) {
	if m.addrank != nil {
		*m.addrank += i
	} else {
		m.addrank = &i
	}
}

// AddedRank returns the value that was added to the "rank" field in this mutation.
func (m *SeatMutation) AddedRank() (r int, exists bool) {
	v := m.addrank
	if v == nil {
		return
	}
	return *v, true
}

// ResetRank resets all changes to the "rank" field.
func (m *SeatMutation) ResetRank() {
	m.rank = nil
	m.addrank = nil
}

// SetIsAvailable sets the "is_available" field.
func (m *SeatMutation) SetIsAvailable(b bool) {
	m.is_available = &b
}

// IsAvailable returns the value of the "is_available" field in the mutation.
func (m *SeatMutation) IsAvailable() (r bool, exists bool) {
	v := m.is_available
	if v == nil {
		return
	}
	return *v, true
}

// OldIsAvailable returns the old "is_available" field's value of the Seat entity.
// If the Seat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatMutation) OldIsAvailable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsAvailable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsAvailable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsAvailable: %w", err)
	}
	return oldValue.IsAvailable, nil
}

// ResetIsAvailable resets all changes to the "is_available" field.
func (m *SeatMutation) ResetIsAvailable() {
	m.is_available = nil
}

// SetFeature sets the "feature" field.
func (m *SeatMutation) SetFeature(i int) {
	m.feature = &i
	m.addfeature = nil
}

// Feature returns the value of the "feature" field in the mutation.
func (m *SeatMutation) Feature() (r int, exists bool) {
	v := m.feature
	if v == nil {
		return
	}
	return *v, true
}

// OldFeature returns the old "feature" field's value of the Seat entity.
// If the Seat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatMutation) OldFeature(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeature: %w", err)
	}
	return oldValue.Feature, nil
}

// AddFeature adds i to the "feature" field.
func (m *SeatMutation) AddFeature(i int) {
	if m.addfeature != nil {
		*m.addfeature += i
	} else {
		m.addfeature = &i
	}
}

// AddedFeature returns the value that was added to the "feature" field in this mutation.
func (m *SeatMutation) AddedFeature() (r int, exists bool) {
	v := m.addfeature
	if v == nil {
		return
	}
	return *v, true
}

// ResetFeature resets all changes to the "feature" field.
func (m *SeatMutation) ResetFeature() {
	m.feature = nil
	m.addfeature = nil
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by ids.
func (m *SeatMutation) AddTicketIDs(ids ...uuid.UUID) {
	if m.tickets == nil {
		m.tickets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.tickets[ids[i]] = struct{}{}
	}
}

// ClearTickets clears the "tickets" edge to the Ticket entity.
func (m *SeatMutation) ClearTickets() {
	m.clearedtickets = true
}

// TicketsCleared reports if the "tickets" edge to the Ticket entity was cleared.
func (m *SeatMutation) TicketsCleared() bool {
	return m.clearedtickets
}

// RemoveTicketIDs removes the "tickets" edge to the Ticket entity by IDs.
func (m *SeatMutation) RemoveTicketIDs(ids ...uuid.UUID) {
	if m.removedtickets == nil {
		m.removedtickets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.tickets, ids[i])
		m.removedtickets[ids[i]] = struct{}{}
	}
}

// RemovedTickets returns the removed IDs of the "tickets" edge to the Ticket entity.
func (m *SeatMutation) RemovedTicketsIDs() (ids []uuid.UUID) {
	for id := range m.removedtickets {
		ids = append(ids, id)
	}
	return
}

// TicketsIDs returns the "tickets" edge IDs in the mutation.
func (m *SeatMutation) TicketsIDs() (ids []uuid.UUID) {
	for id := range m.tickets {
		ids = append(ids, id)
	}
	return
}

// ResetTickets resets all changes to the "tickets" edge.
func (m *SeatMutation) ResetTickets() {
	m.tickets = nil
	m.clearedtickets = false
	m.removedtickets = nil
}

// SetRowsID sets the "rows" edge to the Row entity by id.
func (m *SeatMutation) SetRowsID(id uuid.UUID) {
	m.rows = &id
}

// ClearRows clears the "rows" edge to the Row entity.
func (m *SeatMutation) ClearRows() {
	m.clearedrows = true
}

// RowsCleared reports if the "rows" edge to the Row entity was cleared.
func (m *SeatMutation) RowsCleared() bool {
	return m.clearedrows
}

// RowsID returns the "rows" edge ID in the mutation.
func (m *SeatMutation) RowsID() (id uuid.UUID, exists bool) {
	if m.rows != nil {
		return *m.rows, true
	}
	return
}

// RowsIDs returns the "rows" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RowsID instead. It exists only for internal usage by the builders.
func (m *SeatMutation) RowsIDs() (ids []uuid.UUID) {
	if id := m.rows; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRows resets all changes to the "rows" edge.
func (m *SeatMutation) ResetRows() {
	m.rows = nil
	m.clearedrows = false
}

// Where appends a list predicates to the SeatMutation builder.
func (m *SeatMutation) Where(ps ...predicate.Seat) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SeatMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Seat).
func (m *SeatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SeatMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.number != nil {
		fields = append(fields, seat.FieldNumber)
	}
	if m.row != nil {
		fields = append(fields, seat.FieldRow)
	}
	if m.col != nil {
		fields = append(fields, seat.FieldCol)
	}
	if m.rank != nil {
		fields = append(fields, seat.FieldRank)
	}
	if m.is_available != nil {
		fields = append(fields, seat.FieldIsAvailable)
	}
	if m.feature != nil {
		fields = append(fields, seat.FieldFeature)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SeatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case seat.FieldNumber:
		return m.Number()
	case seat.FieldRow:
		return m.Row()
	case seat.FieldCol:
		return m.Col()
	case seat.FieldRank:
		return m.Rank()
	case seat.FieldIsAvailable:
		return m.IsAvailable()
	case seat.FieldFeature:
		return m.Feature()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SeatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case seat.FieldNumber:
		return m.OldNumber(ctx)
	case seat.FieldRow:
		return m.OldRow(ctx)
	case seat.FieldCol:
		return m.OldCol(ctx)
	case seat.FieldRank:
		return m.OldRank(ctx)
	case seat.FieldIsAvailable:
		return m.OldIsAvailable(ctx)
	case seat.FieldFeature:
		return m.OldFeature(ctx)
	}
	return nil, fmt.Errorf("unknown Seat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SeatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case seat.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	case seat.FieldRow:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRow(v)
		return nil
	case seat.FieldCol:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCol(v)
		return nil
	case seat.FieldRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRank(v)
		return nil
	case seat.FieldIsAvailable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsAvailable(v)
		return nil
	case seat.FieldFeature:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeature(v)
		return nil
	}
	return fmt.Errorf("unknown Seat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SeatMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, seat.FieldNumber)
	}
	if m.addrow != nil {
		fields = append(fields, seat.FieldRow)
	}
	if m.addcol != nil {
		fields = append(fields, seat.FieldCol)
	}
	if m.addrank != nil {
		fields = append(fields, seat.FieldRank)
	}
	if m.addfeature != nil {
		fields = append(fields, seat.FieldFeature)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SeatMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case seat.FieldNumber:
		return m.AddedNumber()
	case seat.FieldRow:
		return m.AddedRow()
	case seat.FieldCol:
		return m.AddedCol()
	case seat.FieldRank:
		return m.AddedRank()
	case seat.FieldFeature:
		return m.AddedFeature()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SeatMutation) AddField(name string, value ent.Value) error {
	switch name {
	case seat.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	case seat.FieldRow:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRow(v)
		return nil
	case seat.FieldCol:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCol(v)
		return nil
	case seat.FieldRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRank(v)
		return nil
	case seat.FieldFeature:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFeature(v)
		return nil
	}
	return fmt.Errorf("unknown Seat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SeatMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SeatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SeatMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Seat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SeatMutation) ResetField(name string) error {
	switch name {
	case seat.FieldNumber:
		m.ResetNumber()
		return nil
	case seat.FieldRow:
		m.ResetRow()
		return nil
	case seat.FieldCol:
		m.ResetCol()
		return nil
	case seat.FieldRank:
		m.ResetRank()
		return nil
	case seat.FieldIsAvailable:
		m.ResetIsAvailable()
		return nil
	case seat.FieldFeature:
		m.ResetFeature()
		return nil
	}
	return fmt.Errorf("unknown Seat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SeatMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.tickets != nil {
		edges = append(edges, seat.EdgeTickets)
	}
	if m.rows != nil {
		edges = append(edges, seat.EdgeRows)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SeatMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case seat.EdgeTickets:
		ids := make([]ent.Value, 0, len(m.tickets))
		for id := range m.tickets {
			ids = append(ids, id)
		}
		return ids
	case seat.EdgeRows:
		if id := m.rows; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SeatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtickets != nil {
		edges = append(edges, seat.EdgeTickets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SeatMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case seat.EdgeTickets:
		ids := make([]ent.Value, 0, len(m.removedtickets))
		for id := range m.removedtickets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SeatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtickets {
		edges = append(edges, seat.EdgeTickets)
	}
	if m.clearedrows {
		edges = append(edges, seat.EdgeRows)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SeatMutation) EdgeCleared(name string) bool {
	switch name {
	case seat.EdgeTickets:
		return m.clearedtickets
	case seat.EdgeRows:
		return m.clearedrows
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SeatMutation) ClearEdge(name string) error {
	switch name {
	case seat.EdgeRows:
		m.ClearRows()
		return nil
	}
	return fmt.Errorf("unknown Seat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SeatMutation) ResetEdge(name string) error {
	switch name {
	case seat.EdgeTickets:
		m.ResetTickets()
		return nil
	case seat.EdgeRows:
		m.ResetRows()
		return nil
	}
	return fmt.Errorf("unknown Seat edge %s", name)
}

// SectionMutation represents an operation that mutates the Section nodes in the graph.
type SectionMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	clearedFields map[string]struct{}
	layout        *uuid.UUID
	clearedlayout bool
	rows          map[uuid.UUID]struct{}
	removedrows   map[uuid.UUID]struct{}
	clearedrows   bool
	done          bool
	oldValue      func(context.Context) (*Section, error)
	predicates    []predicate.Section
}

var _ ent.Mutation = (*SectionMutation)(nil)

// sectionOption allows management of the mutation configuration using functional options.
type sectionOption func(*SectionMutation)

// newSectionMutation creates new mutation for the Section entity.
func newSectionMutation(c config, op Op, opts ...sectionOption) *SectionMutation {
	m := &SectionMutation{
		config:        c,
		op:            op,
		typ:           TypeSection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSectionID sets the ID field of the mutation.
func withSectionID(id uuid.UUID) sectionOption {
	return func(m *SectionMutation) {
		var (
			err   error
			once  sync.Once
			value *Section
		)
		m.oldValue = func(ctx context.Context) (*Section, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Section.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSection sets the old Section of the mutation.
func withSection(node *Section) sectionOption {
	return func(m *SectionMutation) {
		m.oldValue = func(context.Context) (*Section, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Section entities.
func (m *SectionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SectionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SectionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Section.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SectionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SectionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Section entity.
// If the Section object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SectionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SectionMutation) ResetName() {
	m.name = nil
}

// SetLayoutID sets the "layout" edge to the Layout entity by id.
func (m *SectionMutation) SetLayoutID(id uuid.UUID) {
	m.layout = &id
}

// ClearLayout clears the "layout" edge to the Layout entity.
func (m *SectionMutation) ClearLayout() {
	m.clearedlayout = true
}

// LayoutCleared reports if the "layout" edge to the Layout entity was cleared.
func (m *SectionMutation) LayoutCleared() bool {
	return m.clearedlayout
}

// LayoutID returns the "layout" edge ID in the mutation.
func (m *SectionMutation) LayoutID() (id uuid.UUID, exists bool) {
	if m.layout != nil {
		return *m.layout, true
	}
	return
}

// LayoutIDs returns the "layout" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LayoutID instead. It exists only for internal usage by the builders.
func (m *SectionMutation) LayoutIDs() (ids []uuid.UUID) {
	if id := m.layout; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLayout resets all changes to the "layout" edge.
func (m *SectionMutation) ResetLayout() {
	m.layout = nil
	m.clearedlayout = false
}

// AddRowIDs adds the "rows" edge to the Row entity by ids.
func (m *SectionMutation) AddRowIDs(ids ...uuid.UUID) {
	if m.rows == nil {
		m.rows = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.rows[ids[i]] = struct{}{}
	}
}

// ClearRows clears the "rows" edge to the Row entity.
func (m *SectionMutation) ClearRows() {
	m.clearedrows = true
}

// RowsCleared reports if the "rows" edge to the Row entity was cleared.
func (m *SectionMutation) RowsCleared() bool {
	return m.clearedrows
}

// RemoveRowIDs removes the "rows" edge to the Row entity by IDs.
func (m *SectionMutation) RemoveRowIDs(ids ...uuid.UUID) {
	if m.removedrows == nil {
		m.removedrows = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.rows, ids[i])
		m.removedrows[ids[i]] = struct{}{}
	}
}

// RemovedRows returns the removed IDs of the "rows" edge to the Row entity.
func (m *SectionMutation) RemovedRowsIDs() (ids []uuid.UUID) {
	for id := range m.removedrows {
		ids = append(ids, id)
	}
	return
}

// RowsIDs returns the "rows" edge IDs in the mutation.
func (m *SectionMutation) RowsIDs() (ids []uuid.UUID) {
	for id := range m.rows {
		ids = append(ids, id)
	}
	return
}

// ResetRows resets all changes to the "rows" edge.
func (m *SectionMutation) ResetRows() {
	m.rows = nil
	m.clearedrows = false
	m.removedrows = nil
}

// Where appends a list predicates to the SectionMutation builder.
func (m *SectionMutation) Where(ps ...predicate.Section) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SectionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Section).
func (m *SectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SectionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, section.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case section.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case section.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Section field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case section.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Section field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SectionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SectionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Section numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Section nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SectionMutation) ResetField(name string) error {
	switch name {
	case section.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Section field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.layout != nil {
		edges = append(edges, section.EdgeLayout)
	}
	if m.rows != nil {
		edges = append(edges, section.EdgeRows)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case section.EdgeLayout:
		if id := m.layout; id != nil {
			return []ent.Value{*id}
		}
	case section.EdgeRows:
		ids := make([]ent.Value, 0, len(m.rows))
		for id := range m.rows {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrows != nil {
		edges = append(edges, section.EdgeRows)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case section.EdgeRows:
		ids := make([]ent.Value, 0, len(m.removedrows))
		for id := range m.removedrows {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlayout {
		edges = append(edges, section.EdgeLayout)
	}
	if m.clearedrows {
		edges = append(edges, section.EdgeRows)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SectionMutation) EdgeCleared(name string) bool {
	switch name {
	case section.EdgeLayout:
		return m.clearedlayout
	case section.EdgeRows:
		return m.clearedrows
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SectionMutation) ClearEdge(name string) error {
	switch name {
	case section.EdgeLayout:
		m.ClearLayout()
		return nil
	}
	return fmt.Errorf("unknown Section unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SectionMutation) ResetEdge(name string) error {
	switch name {
	case section.EdgeLayout:
		m.ResetLayout()
		return nil
	case section.EdgeRows:
		m.ResetRows()
		return nil
	}
	return fmt.Errorf("unknown Section edge %s", name)
}

// TicketMutation represents an operation that mutates the Ticket nodes in the graph.
type TicketMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	clearedFields map[string]struct{}
	seat          *uuid.UUID
	clearedseat   bool
	event         *uuid.UUID
	clearedevent  bool
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Ticket, error)
	predicates    []predicate.Ticket
}

var _ ent.Mutation = (*TicketMutation)(nil)

// ticketOption allows management of the mutation configuration using functional options.
type ticketOption func(*TicketMutation)

// newTicketMutation creates new mutation for the Ticket entity.
func newTicketMutation(c config, op Op, opts ...ticketOption) *TicketMutation {
	m := &TicketMutation{
		config:        c,
		op:            op,
		typ:           TypeTicket,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTicketID sets the ID field of the mutation.
func withTicketID(id uuid.UUID) ticketOption {
	return func(m *TicketMutation) {
		var (
			err   error
			once  sync.Once
			value *Ticket
		)
		m.oldValue = func(ctx context.Context) (*Ticket, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Ticket.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTicket sets the old Ticket of the mutation.
func withTicket(node *Ticket) ticketOption {
	return func(m *TicketMutation) {
		m.oldValue = func(context.Context) (*Ticket, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TicketMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TicketMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Ticket entities.
func (m *TicketMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TicketMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TicketMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Ticket.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSeatID sets the "seat" edge to the Seat entity by id.
func (m *TicketMutation) SetSeatID(id uuid.UUID) {
	m.seat = &id
}

// ClearSeat clears the "seat" edge to the Seat entity.
func (m *TicketMutation) ClearSeat() {
	m.clearedseat = true
}

// SeatCleared reports if the "seat" edge to the Seat entity was cleared.
func (m *TicketMutation) SeatCleared() bool {
	return m.clearedseat
}

// SeatID returns the "seat" edge ID in the mutation.
func (m *TicketMutation) SeatID() (id uuid.UUID, exists bool) {
	if m.seat != nil {
		return *m.seat, true
	}
	return
}

// SeatIDs returns the "seat" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SeatID instead. It exists only for internal usage by the builders.
func (m *TicketMutation) SeatIDs() (ids []uuid.UUID) {
	if id := m.seat; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSeat resets all changes to the "seat" edge.
func (m *TicketMutation) ResetSeat() {
	m.seat = nil
	m.clearedseat = false
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *TicketMutation) SetEventID(id uuid.UUID) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *TicketMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *TicketMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *TicketMutation) EventID() (id uuid.UUID, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *TicketMutation) EventIDs() (ids []uuid.UUID) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *TicketMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *TicketMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *TicketMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *TicketMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *TicketMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *TicketMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *TicketMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the TicketMutation builder.
func (m *TicketMutation) Where(ps ...predicate.Ticket) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TicketMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Ticket).
func (m *TicketMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TicketMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TicketMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TicketMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Ticket field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Ticket field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TicketMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TicketMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Ticket numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TicketMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TicketMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TicketMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Ticket nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TicketMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Ticket field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TicketMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.seat != nil {
		edges = append(edges, ticket.EdgeSeat)
	}
	if m.event != nil {
		edges = append(edges, ticket.EdgeEvent)
	}
	if m.user != nil {
		edges = append(edges, ticket.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TicketMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ticket.EdgeSeat:
		if id := m.seat; id != nil {
			return []ent.Value{*id}
		}
	case ticket.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	case ticket.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TicketMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TicketMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TicketMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedseat {
		edges = append(edges, ticket.EdgeSeat)
	}
	if m.clearedevent {
		edges = append(edges, ticket.EdgeEvent)
	}
	if m.cleareduser {
		edges = append(edges, ticket.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TicketMutation) EdgeCleared(name string) bool {
	switch name {
	case ticket.EdgeSeat:
		return m.clearedseat
	case ticket.EdgeEvent:
		return m.clearedevent
	case ticket.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TicketMutation) ClearEdge(name string) error {
	switch name {
	case ticket.EdgeSeat:
		m.ClearSeat()
		return nil
	case ticket.EdgeEvent:
		m.ClearEvent()
		return nil
	case ticket.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Ticket unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TicketMutation) ResetEdge(name string) error {
	switch name {
	case ticket.EdgeSeat:
		m.ResetSeat()
		return nil
	case ticket.EdgeEvent:
		m.ResetEvent()
		return nil
	case ticket.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Ticket edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	name                *string
	clearedFields       map[string]struct{}
	reservations        map[uuid.UUID]struct{}
	removedreservations map[uuid.UUID]struct{}
	clearedreservations bool
	tickets             map[uuid.UUID]struct{}
	removedtickets      map[uuid.UUID]struct{}
	clearedtickets      bool
	done                bool
	oldValue            func(context.Context) (*User, error)
	predicates          []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// AddReservationIDs adds the "reservations" edge to the Reservation entity by ids.
func (m *UserMutation) AddReservationIDs(ids ...uuid.UUID) {
	if m.reservations == nil {
		m.reservations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.reservations[ids[i]] = struct{}{}
	}
}

// ClearReservations clears the "reservations" edge to the Reservation entity.
func (m *UserMutation) ClearReservations() {
	m.clearedreservations = true
}

// ReservationsCleared reports if the "reservations" edge to the Reservation entity was cleared.
func (m *UserMutation) ReservationsCleared() bool {
	return m.clearedreservations
}

// RemoveReservationIDs removes the "reservations" edge to the Reservation entity by IDs.
func (m *UserMutation) RemoveReservationIDs(ids ...uuid.UUID) {
	if m.removedreservations == nil {
		m.removedreservations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.reservations, ids[i])
		m.removedreservations[ids[i]] = struct{}{}
	}
}

// RemovedReservations returns the removed IDs of the "reservations" edge to the Reservation entity.
func (m *UserMutation) RemovedReservationsIDs() (ids []uuid.UUID) {
	for id := range m.removedreservations {
		ids = append(ids, id)
	}
	return
}

// ReservationsIDs returns the "reservations" edge IDs in the mutation.
func (m *UserMutation) ReservationsIDs() (ids []uuid.UUID) {
	for id := range m.reservations {
		ids = append(ids, id)
	}
	return
}

// ResetReservations resets all changes to the "reservations" edge.
func (m *UserMutation) ResetReservations() {
	m.reservations = nil
	m.clearedreservations = false
	m.removedreservations = nil
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by ids.
func (m *UserMutation) AddTicketIDs(ids ...uuid.UUID) {
	if m.tickets == nil {
		m.tickets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.tickets[ids[i]] = struct{}{}
	}
}

// ClearTickets clears the "tickets" edge to the Ticket entity.
func (m *UserMutation) ClearTickets() {
	m.clearedtickets = true
}

// TicketsCleared reports if the "tickets" edge to the Ticket entity was cleared.
func (m *UserMutation) TicketsCleared() bool {
	return m.clearedtickets
}

// RemoveTicketIDs removes the "tickets" edge to the Ticket entity by IDs.
func (m *UserMutation) RemoveTicketIDs(ids ...uuid.UUID) {
	if m.removedtickets == nil {
		m.removedtickets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.tickets, ids[i])
		m.removedtickets[ids[i]] = struct{}{}
	}
}

// RemovedTickets returns the removed IDs of the "tickets" edge to the Ticket entity.
func (m *UserMutation) RemovedTicketsIDs() (ids []uuid.UUID) {
	for id := range m.removedtickets {
		ids = append(ids, id)
	}
	return
}

// TicketsIDs returns the "tickets" edge IDs in the mutation.
func (m *UserMutation) TicketsIDs() (ids []uuid.UUID) {
	for id := range m.tickets {
		ids = append(ids, id)
	}
	return
}

// ResetTickets resets all changes to the "tickets" edge.
func (m *UserMutation) ResetTickets() {
	m.tickets = nil
	m.clearedtickets = false
	m.removedtickets = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.reservations != nil {
		edges = append(edges, user.EdgeReservations)
	}
	if m.tickets != nil {
		edges = append(edges, user.EdgeTickets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeReservations:
		ids := make([]ent.Value, 0, len(m.reservations))
		for id := range m.reservations {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTickets:
		ids := make([]ent.Value, 0, len(m.tickets))
		for id := range m.tickets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedreservations != nil {
		edges = append(edges, user.EdgeReservations)
	}
	if m.removedtickets != nil {
		edges = append(edges, user.EdgeTickets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeReservations:
		ids := make([]ent.Value, 0, len(m.removedreservations))
		for id := range m.removedreservations {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTickets:
		ids := make([]ent.Value, 0, len(m.removedtickets))
		for id := range m.removedtickets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedreservations {
		edges = append(edges, user.EdgeReservations)
	}
	if m.clearedtickets {
		edges = append(edges, user.EdgeTickets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeReservations:
		return m.clearedreservations
	case user.EdgeTickets:
		return m.clearedtickets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeReservations:
		m.ResetReservations()
		return nil
	case user.EdgeTickets:
		m.ResetTickets()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
