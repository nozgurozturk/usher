// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/row"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/section"
)

// Row is the model entity for the Row schema.
type Row struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RowQuery when eager-loading is set.
	Edges        RowEdges `json:"edges"`
	section_rows *uuid.UUID
}

// RowEdges holds the relations/edges for other nodes in the graph.
type RowEdges struct {
	// Section holds the value of the section edge.
	Section *Section `json:"section,omitempty"`
	// Seats holds the value of the seats edge.
	Seats []*Seat `json:"seats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SectionOrErr returns the Section value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RowEdges) SectionOrErr() (*Section, error) {
	if e.loadedTypes[0] {
		if e.Section == nil {
			// The edge section was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: section.Label}
		}
		return e.Section, nil
	}
	return nil, &NotLoadedError{edge: "section"}
}

// SeatsOrErr returns the Seats value or an error if the edge
// was not loaded in eager-loading.
func (e RowEdges) SeatsOrErr() ([]*Seat, error) {
	if e.loadedTypes[1] {
		return e.Seats, nil
	}
	return nil, &NotLoadedError{edge: "seats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Row) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case row.FieldOrder:
			values[i] = new(sql.NullInt64)
		case row.FieldName:
			values[i] = new(sql.NullString)
		case row.FieldID:
			values[i] = new(uuid.UUID)
		case row.ForeignKeys[0]: // section_rows
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Row", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Row fields.
func (r *Row) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case row.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case row.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case row.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				r.Order = int(value.Int64)
			}
		case row.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field section_rows", values[i])
			} else if value.Valid {
				r.section_rows = new(uuid.UUID)
				*r.section_rows = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QuerySection queries the "section" edge of the Row entity.
func (r *Row) QuerySection() *SectionQuery {
	return (&RowClient{config: r.config}).QuerySection(r)
}

// QuerySeats queries the "seats" edge of the Row entity.
func (r *Row) QuerySeats() *SeatQuery {
	return (&RowClient{config: r.config}).QuerySeats(r)
}

// Update returns a builder for updating this Row.
// Note that you need to call Row.Unwrap() before calling this method if this Row
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Row) Update() *RowUpdateOne {
	return (&RowClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Row entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Row) Unwrap() *Row {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Row is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Row) String() string {
	var builder strings.Builder
	builder.WriteString("Row(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", name=")
	builder.WriteString(r.Name)
	builder.WriteString(", order=")
	builder.WriteString(fmt.Sprintf("%v", r.Order))
	builder.WriteByte(')')
	return builder.String()
}

// Rows is a parsable slice of Row.
type Rows []*Row

func (r Rows) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
