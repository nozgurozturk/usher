// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/event"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/layout"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/predicate"
	"github.com/nozgurozturk/usher/internal/infrastructure/store/ent/section"
)

// LayoutUpdate is the builder for updating Layout entities.
type LayoutUpdate struct {
	config
	hooks    []Hook
	mutation *LayoutMutation
}

// Where appends a list predicates to the LayoutUpdate builder.
func (lu *LayoutUpdate) Where(ps ...predicate.Layout) *LayoutUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetName sets the "name" field.
func (lu *LayoutUpdate) SetName(s string) *LayoutUpdate {
	lu.mutation.SetName(s)
	return lu
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (lu *LayoutUpdate) AddEventIDs(ids ...uuid.UUID) *LayoutUpdate {
	lu.mutation.AddEventIDs(ids...)
	return lu
}

// AddEvents adds the "events" edges to the Event entity.
func (lu *LayoutUpdate) AddEvents(e ...*Event) *LayoutUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lu.AddEventIDs(ids...)
}

// AddSectionIDs adds the "sections" edge to the Section entity by IDs.
func (lu *LayoutUpdate) AddSectionIDs(ids ...uuid.UUID) *LayoutUpdate {
	lu.mutation.AddSectionIDs(ids...)
	return lu
}

// AddSections adds the "sections" edges to the Section entity.
func (lu *LayoutUpdate) AddSections(s ...*Section) *LayoutUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return lu.AddSectionIDs(ids...)
}

// Mutation returns the LayoutMutation object of the builder.
func (lu *LayoutUpdate) Mutation() *LayoutMutation {
	return lu.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (lu *LayoutUpdate) ClearEvents() *LayoutUpdate {
	lu.mutation.ClearEvents()
	return lu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (lu *LayoutUpdate) RemoveEventIDs(ids ...uuid.UUID) *LayoutUpdate {
	lu.mutation.RemoveEventIDs(ids...)
	return lu
}

// RemoveEvents removes "events" edges to Event entities.
func (lu *LayoutUpdate) RemoveEvents(e ...*Event) *LayoutUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lu.RemoveEventIDs(ids...)
}

// ClearSections clears all "sections" edges to the Section entity.
func (lu *LayoutUpdate) ClearSections() *LayoutUpdate {
	lu.mutation.ClearSections()
	return lu
}

// RemoveSectionIDs removes the "sections" edge to Section entities by IDs.
func (lu *LayoutUpdate) RemoveSectionIDs(ids ...uuid.UUID) *LayoutUpdate {
	lu.mutation.RemoveSectionIDs(ids...)
	return lu
}

// RemoveSections removes "sections" edges to Section entities.
func (lu *LayoutUpdate) RemoveSections(s ...*Section) *LayoutUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return lu.RemoveSectionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LayoutUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lu.hooks) == 0 {
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LayoutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			if lu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LayoutUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LayoutUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LayoutUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LayoutUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   layout.Table,
			Columns: layout.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: layout.FieldID,
			},
		},
	}
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: layout.FieldName,
		})
	}
	if lu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   layout.EventsTable,
			Columns: []string{layout.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !lu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   layout.EventsTable,
			Columns: []string{layout.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   layout.EventsTable,
			Columns: []string{layout.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.SectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   layout.SectionsTable,
			Columns: []string{layout.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: section.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedSectionsIDs(); len(nodes) > 0 && !lu.mutation.SectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   layout.SectionsTable,
			Columns: []string{layout.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: section.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.SectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   layout.SectionsTable,
			Columns: []string{layout.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: section.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{layout.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LayoutUpdateOne is the builder for updating a single Layout entity.
type LayoutUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LayoutMutation
}

// SetName sets the "name" field.
func (luo *LayoutUpdateOne) SetName(s string) *LayoutUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (luo *LayoutUpdateOne) AddEventIDs(ids ...uuid.UUID) *LayoutUpdateOne {
	luo.mutation.AddEventIDs(ids...)
	return luo
}

// AddEvents adds the "events" edges to the Event entity.
func (luo *LayoutUpdateOne) AddEvents(e ...*Event) *LayoutUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return luo.AddEventIDs(ids...)
}

// AddSectionIDs adds the "sections" edge to the Section entity by IDs.
func (luo *LayoutUpdateOne) AddSectionIDs(ids ...uuid.UUID) *LayoutUpdateOne {
	luo.mutation.AddSectionIDs(ids...)
	return luo
}

// AddSections adds the "sections" edges to the Section entity.
func (luo *LayoutUpdateOne) AddSections(s ...*Section) *LayoutUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return luo.AddSectionIDs(ids...)
}

// Mutation returns the LayoutMutation object of the builder.
func (luo *LayoutUpdateOne) Mutation() *LayoutMutation {
	return luo.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (luo *LayoutUpdateOne) ClearEvents() *LayoutUpdateOne {
	luo.mutation.ClearEvents()
	return luo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (luo *LayoutUpdateOne) RemoveEventIDs(ids ...uuid.UUID) *LayoutUpdateOne {
	luo.mutation.RemoveEventIDs(ids...)
	return luo
}

// RemoveEvents removes "events" edges to Event entities.
func (luo *LayoutUpdateOne) RemoveEvents(e ...*Event) *LayoutUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return luo.RemoveEventIDs(ids...)
}

// ClearSections clears all "sections" edges to the Section entity.
func (luo *LayoutUpdateOne) ClearSections() *LayoutUpdateOne {
	luo.mutation.ClearSections()
	return luo
}

// RemoveSectionIDs removes the "sections" edge to Section entities by IDs.
func (luo *LayoutUpdateOne) RemoveSectionIDs(ids ...uuid.UUID) *LayoutUpdateOne {
	luo.mutation.RemoveSectionIDs(ids...)
	return luo
}

// RemoveSections removes "sections" edges to Section entities.
func (luo *LayoutUpdateOne) RemoveSections(s ...*Section) *LayoutUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return luo.RemoveSectionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LayoutUpdateOne) Select(field string, fields ...string) *LayoutUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Layout entity.
func (luo *LayoutUpdateOne) Save(ctx context.Context) (*Layout, error) {
	var (
		err  error
		node *Layout
	)
	if len(luo.hooks) == 0 {
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LayoutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			if luo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = luo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LayoutUpdateOne) SaveX(ctx context.Context) *Layout {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LayoutUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LayoutUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LayoutUpdateOne) sqlSave(ctx context.Context) (_node *Layout, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   layout.Table,
			Columns: layout.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: layout.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Layout.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, layout.FieldID)
		for _, f := range fields {
			if !layout.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != layout.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: layout.FieldName,
		})
	}
	if luo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   layout.EventsTable,
			Columns: []string{layout.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !luo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   layout.EventsTable,
			Columns: []string{layout.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   layout.EventsTable,
			Columns: []string{layout.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.SectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   layout.SectionsTable,
			Columns: []string{layout.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: section.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedSectionsIDs(); len(nodes) > 0 && !luo.mutation.SectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   layout.SectionsTable,
			Columns: []string{layout.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: section.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.SectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   layout.SectionsTable,
			Columns: []string{layout.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: section.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Layout{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{layout.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
