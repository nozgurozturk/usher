// Package admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package admin

import (
	"time"
)

// Defines values for CreateLayoutRequestNumbering.
const (
	CreateLayoutRequestNumberingEvenOdd CreateLayoutRequestNumbering = "even-odd"

	CreateLayoutRequestNumberingOddEven CreateLayoutRequestNumbering = "odd-even"

	CreateLayoutRequestNumberingSequential CreateLayoutRequestNumbering = "sequential"
)

// Defines values for CreateLayoutRequestSectionsFeature.
const (
	CreateLayoutRequestSectionsFeatureBalcony CreateLayoutRequestSectionsFeature = "balcony"

	CreateLayoutRequestSectionsFeatureDefault CreateLayoutRequestSectionsFeature = "default"
)

// CreateLayoutRequest defines model for CreateLayoutRequest.
type CreateLayoutRequest struct {
	Name      string                        `json:"name"`
	Numbering *CreateLayoutRequestNumbering `json:"numbering,omitempty"`
	Sections  []struct {
		Feature *CreateLayoutRequestSectionsFeature `json:"feature,omitempty"`
		Name    string                              `json:"name"`
		Rows    []struct {
			Name  string `json:"name"`
			Seats []struct {
				Features int `json:"features"`
				Rank     int `json:"rank"`
			} `json:"seats"`
		} `json:"rows"`
	} `json:"sections"`
}

// CreateLayoutRequestNumbering defines model for CreateLayoutRequest.Numbering.
type CreateLayoutRequestNumbering string

// CreateLayoutRequestSectionsFeature defines model for CreateLayoutRequest.Sections.Feature.
type CreateLayoutRequestSectionsFeature string

// CreateLayoutResponse defines model for CreateLayoutResponse.
type CreateLayoutResponse Hall

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error   string `json:"error"`
	Message string `json:"message"`
}

// Event defines model for Event.
type Event struct {
	Description string     `json:"description"`
	EndDate     *time.Time `json:"endDate,omitempty"`
	Id          string     `json:"id"`
	Name        string     `json:"name"`
	StartDate   *time.Time `json:"startDate,omitempty"`
}

// EventResponse defines model for EventResponse.
type EventResponse struct {
	Event        Event         `json:"event"`
	Layout       Hall          `json:"layout"`
	Reservations []Reservation `json:"reservations"`
	Tickets      []Ticket      `json:"tickets"`
}

// EventsResponse defines model for EventsResponse.
type EventsResponse []struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	LocationID string `json:"locationID"`
}

// GetLayoutResponse defines model for GetLayoutResponse.
type GetLayoutResponse Hall

// GetLayoutsResponse defines model for GetLayoutsResponse.
type GetLayoutsResponse []struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Hall defines model for Hall.
type Hall struct {
	Id       string    `json:"id"`
	Name     string    `json:"name"`
	Sections []Section `json:"sections"`
}

// Reservation defines model for Reservation.
type Reservation struct {
	Event       Event  `json:"event"`
	Id          string `json:"id"`
	Preferences struct {
		Features *int `json:"features,omitempty"`
		Rank     int  `json:"rank"`
	} `json:"preferences"`
	Size int  `json:"size"`
	User User `json:"user"`
}

// ReserveEventResponse defines model for ReserveEventResponse.
type ReserveEventResponse struct {
	Event *Event `json:"event,omitempty"`
}

// Row defines model for Row.
type Row struct {
	Name  string `json:"name"`
	Order int    `json:"order"`
	Seats []Seat `json:"seats"`
}

// Seat defines model for Seat.
type Seat struct {
	Available bool   `json:"available"`
	Features  *int   `json:"features,omitempty"`
	Id        string `json:"id"`
	Number    int    `json:"number"`
	Position  struct {
		Col int `json:"col"`
		Row int `json:"row"`
	} `json:"position"`
	Rank int `json:"rank"`
}

// Section defines model for Section.
type Section struct {
	Name string `json:"name"`
	Rows []Row  `json:"rows"`
}

// Ticket defines model for Ticket.
type Ticket struct {
	Event Event  `json:"event"`
	Id    string `json:"id"`
	Seat  *Seat  `json:"seat,omitempty"`
	User  User   `json:"user"`
}

// User defines model for User.
type User struct {
	Id string `json:"id"`
}

// CreateLayoutJSONBody defines parameters for CreateLayout.
type CreateLayoutJSONBody CreateLayoutRequest

// CreateLayoutJSONRequestBody defines body for CreateLayout for application/json ContentType.
type CreateLayoutJSONRequestBody CreateLayoutJSONBody
