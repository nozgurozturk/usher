// Package admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package admin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYz26kOBN/lVZ935GEzOyN2+wk2o12pFlld06jPrihOvEEbMYuOsq2ePeVy0DTYGiy",
	"SaTklA7Y5fr9KbvMHlJdlFqhIgvJHmx6h4Xgn58NCsIv4lFXdIM/K7TkHpdGl2hIIg9SokD3lx5LhAQs",
	"GaluoY5AVcUG+Z9kD6iqApLvYF0YRVLkEIHOsjPcoYII3J8znWWwjsaRLKYkteLlJGFhx1lsUVBlsL9U",
	"hltR5QQRbESeavUYjD2ZvtEPcwtOzrMoaEGmtjdZKsJbNLyqUPehN+4V/qykwcxh42HRIda67qAJY8Tj",
	"aAKn2ya3dDRTsDx0I9KBZb35gSk5WMdOsqVWltn7v8EtJPC/+ODBuDFg/LvIczf3yhht+pOO+UT3OqhE",
	"gdaK25BKAwQ+xGFCCMHVDlXA/Rna1MjSIQ/mgCq7FMQ5bLUpBEECmSA8I8msjSbILFxMk3YjYegpSwyw",
	"ywyiVsI+mCYyMIRpRmZ0aQmb09izWkeQszWWWsKgRbMT401hbvLNYRKMPB0ByfQeaXm4v3k8nKoOT0MH",
	"cJD7YdlJhm2f4i4zkedft5B8X0bvUJtcp5zA9eXp4uiNHecYynpI7G9I/63wu4lhCo4hPa1u5qogsJF1",
	"WDi1Z649cZ7NMfKXn3DSbCdgHDTq18IzK3cCfGlwiwZViq96BobAWfkPhiNXFs0pYN9sYC0mti1ljnKM",
	"sFl0mmp8wd1ynFtwXf3whK5FmwxNmLRxQzNvVXF6U2ws6hftupIACI42QiF2QuZik/ehbLTOUXCJzLtr",
	"qli5Ww1PKbWV4VJJdT7hYc/+KQvrB4g4SAj8wjpgb3Ypdkiitkk8sBVmOA1DW94Yzx66+gGe1G0GUmxO",
	"2tfZp2zjsCWefsHtI4TzWxN+weGyZAtwg6Taap4uyVULfMoKqVaf/ryGCHZoLCsPH84veA8oUYlSQgK/",
	"nF+cf3SuEnTHScScPP+89VIcNb5wg1QZZVe5tLTS21UznGMa3z5kkLgT/ap9Y5q9kIN+vLjw5aSo0VSU",
	"ZS595xH/sN6gnuPF3hu0T2Mb1tEAxtc/gJ/5i+NTEprN4+gCE1iWB7CoJG6tE7Rhae2eNdzHe/57fVmf",
	"VEHk+ap1W1gA1taIAgmN5TZykJEbtLq+BGchSNgIbWuRQJMI9E1IpsKoR8jQsOtnKn5S6DmC34eusb8a",
	"+O5A26DAPGBC3H6nMRb4HegYbJXejZz+hrd8j2zHB2r0S/fq1bgOXK7eMtM+V/4YFS4N/4XJrrp79jGp",
	"/Q9Qjd/R0q86e3wxVKGvpYOLpiuu+hVFDX5mexey9goo3vsfS066CbU7cy/aBtvl3sw+OP5i8m40dEcY",
	"zR9gtMoEiY2wGDzBaGLXe6PouaN24PkuYXatzyqTQwJ3RKVN4nh/py05u9Xx7kMseE4EO2Gku5gxzHaE",
	"x9rg4q9vuXvlsll3y7bXs/YEqqPuyec7TO+dIL1njUT1uv43AAD//6uZF3/uGQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
