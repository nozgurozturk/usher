openapi: "3.0.2"
info:
  title: Public API
  version: "1.0"
servers:
  - url: https://{hostname}/v1/api
    variables:
      hostname:
        default: localhost
tags:
  - name: Events
  - name: Checkout
  - name: Layout

paths:
  /events:
    get:
      operationId: "GetEvents"
      description: "Returns list of public events"
      tags:
        - User
        - Events
      parameters: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventsResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /events/{eventID}:
    get:
      operationId: "GetEvent"
      description: "Returns public event"
      tags:
        - User
        - Events
      parameters:
        - name: eventID
          in: path
          description: Event ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /events/{eventID}/check:
    post:
      operationId: "CheckEventSeats"
      description: "Returns list of event available seats"
      tags:
        - User
        - Events
      parameters:
        - name: eventID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckEventSeatsRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CheckEventSeatsResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users:
    get:
      operationId: "GetUsers"
      description: "Returns list of public users"
      tags:
        - User
      parameters: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/{userID}:
    get:
      operationId: "GetUser"
      description: "Returns user"
      tags:
        - User
      parameters:
        - name: userID
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/{userID}/tickets:
    get:
      operationId: "GetUserTickets"
      description: "Returns user tickets"
      tags:
        - User
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserTicketsResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /checkout:
    post:
      operationId: "Checkout"
      description: "Checkout"
      tags:
        - User
        - Checkout
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    ErrorResponse:
      type: object
      required: ["error", "message"]
      properties:
        error:
          type: string
        message:
          type: string

    # Layout
    Seat:
      type: object
      required: ["position", "number", "rank", "available"]
      properties:
        position:
          required: ["row", "col"]
          type: object
          properties:
            row:
              type: integer
            col:
              type: integer
        number:
          type: integer
        features:
          type: integer
        rank:
          type: integer
        available:
          type: boolean

    Row:
      type: object
      required: ["name", "order", "seats"]
      properties:
        name:
          type: string
        order:
          type: integer
        seats:
          type: array
          items:
            $ref: "#/components/schemas/Seat"

    Section:
      type: object
      required: ["name", "rows"]
      properties:
        name:
          type: string
        rows:
          type: array
          items:
            $ref: "#/components/schemas/Row"

    Hall:
      type: object
      required: ["name", "sections"]
      properties:
        name:
          type: string
        sections:
          type: array
          items:
            $ref: "#/components/schemas/Section"

    GetLayoutsResponse:
      type: object
      properties:
        layouts:
          type: array
          items:
            $ref: "#/components/schemas/Hall"

    CreateLayoutRequest:
      type: object
      required: ["name", "sections"]
      properties:
        name:
          type: string
        numbering:
          type: string
          enum:
            - "sequential"
            - "odd-even"
            - "even-odd"
        sections:
          type: array
          items:
            required: ["name", "rows"]
            properties:
              name:
                type: string
              feature:
                type: string
                enum:
                  - "default"
                  - "balcony"
              rows:
                type: array
                items:
                  required: ["name", "seats"]
                  properties:
                    name:
                      type: string
                    seats:
                      type: array
                      required: ["rank", "features"]
                      items:
                        properties:
                          features:
                            type: integer
                          rank:
                            type: integer

    CreateLayoutResponse:
      type: object
      properties:
        layout:
          $ref: "#/components/schemas/Hall"

    # Ticket
    Ticket:
      type: object
      required: ["id", "event", "user"]
      properties:
        id:
          type: string
        event:
          type: object
          allOf:
            - $ref: "#/components/schemas/Event"
            - type: object
              required: ["location"]
              properties:
                location:
                  type: object
                  required: ["id", "name"]
                  properties:
                    id:
                      type: string
                    name:
                      type: string

        user:
          $ref: "#/components/schemas/User"
        seat:
          $ref: "#/components/schemas/Seat"

    UserTicketsResponse:
      type: array
      items:
        $ref: "#/components/schemas/Ticket"


    #  Event
    Event:
      type: object
      required: ["id", "name", "description", "layout", "start", "end"]
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time

    EventsResponse:
      type: array
      items:
        type: object
        allOf:
          - $ref: "#/components/schemas/Event"
          - type: object
            required: ["locationID"]
            properties:
              locationID:
                type: string

    EventResponse:
      allOf:
        - $ref: "#/components/schemas/Event"
        - type: object
          required: ["location"]
          properties:
            location:
              $ref: "#/components/schemas/Hall"

    CheckEventSeatsResponse:
      type: object
      required: ["remaining"]
      properties:
        remaining:
          type: integer

    CheckEventSeatsRequest:
      type: object
      required: ["count"]
      properties:
        count:
          type: integer
        rank:
          type: integer
        features:
          type: integer

    CreateEventRequest:
      type: object
      required: ["name", "description", "startDate", "endDate", "location"]
      properties:
        name:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        locationID:
          type: string

    # User
    User:
      type: object
      required: ["id"]
      properties:
        id:
          type: string
        name:
          type: string

    UsersResponse:
      type: array
      items:
        $ref: "#/components/schemas/User"

    UserResponse:
      type: object
      required: ["user"]
      properties:
        user:
          $ref: "#/components/schemas/User"

    # Checkout
    CheckoutRequest:
      type: object
      required: ["eventID", "count", "userID"]
      properties:
        count:
          type: integer
        eventID:
          type: string
        userID:
          type: string
        preferences:
          type: object
          properties:
            features:
              type: integer
            rank:
              type: integer

    CheckoutResponse:
      type: object
      required: ["id", "count", "eventID", "userID"]
      properties:
        id:
          type: string
        eventID:
          type: string
        userID:
          type: string
        count:
          type: integer
        preferences:
          type: object
          properties:
            features:
              type: integer
            rank:
              type: integer

    # Reserve

    ReserveEventResponse:
      type: object
      required: ["id"]
      properties:
        event:
          $ref: "#/components/schemas/Event"
